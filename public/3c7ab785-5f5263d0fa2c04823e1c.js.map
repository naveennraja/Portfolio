{"version":3,"sources":["webpack:///./node_modules/@amcharts/amcharts4/.internal/core/Sprite.js"],"names":["visualProperties","Sprite","_super","_this","call","this","properties","_eventDispatcher","_bindings","_isTemplate","_isPath","_inited","_ready","isHiding","_isHidden","isShowing","isStandaloneInstance","_isActive","_mask","_positionPrecision","_language","_exporting","_exportable","_bbox","x","y","width","height","invalid","positionInvalid","propertyFields","applyOnClones","_measuredWidthSelf","_measuredHeightSelf","maxLeft","maxRight","maxTop","maxBottom","maxLeftSelf","maxRightSelf","maxTopSelf","maxBottomSelf","_isDragged","_isResized","_disabled","_internalDisabled","_updateDisabled","_internalDefaultsApplied","rollOutDelay","isBaseSprite","shouldClone","appeared","ex","ey","dragWhileResize","measureFailed","preventShow","cloneTooltip","className","_disposers","push","uid","group","paper","addGroup","setPropertyValue","_prevMeasuredWidth","_prevMeasuredHeight","_measuredWidth","_measuredHeight","_isMeasured","invalidate","applyTheme","events","key","value","dispose","Object","defineProperty","prototype","get","enumerable","configurable","_adapterO","autoSetClassName","setClassName","getCurrentThemes","themes","_themes","parent_1","parent","applyInternalDefaults","disabled","addToInvalidSprites","requestFrame","validate","dispatchImmediately","beforeDraw","draw","removeFromInvalidSprites","afterDraw","invalidatePosition","addToInvalidPositions","validatePosition","pixelX","pixelY","dx","dy","attr","removeSVGAttribute","sizeChanged","measure","prevGroupTransform","transformString","moveTo","rotation","nonScaling","scale","globalScale","dispatch","showTooltipOn","updateTooltipPosition","removeFromInvalidPositions","maskRectangle","_maskRectangle","_clipElement","e_1","_a","isMeasured","horizontalCenter","verticalCenter","measureElement","_b","keys","_c","next","done","e_1_1","error","applyFilters","visible","interactionsEnabled","getPropertyValue","showOnInit","hidden","hide","applyMask","dispatchReady","__disabled","hideTooltip","showTooltip","isReady","reinit","setState","defaultState","handleGlobalScale","nonScalingStroke","strokeWidth","updateFilterScale","filters","iterator","filter","removeFromInvalids","copyFrom","source","states","length","each","clone","adapter","interactions","plugins","configField","virtualParent","exportable","_tooltip","tooltip","_showSystemTooltip","showSystemTooltip","fillModifier","strokeModifier","isDisposed","htmlContainer","childNodes","removeChild","firstChild","clear","_clones","i","getIndex","_svgContainer","_interactionDisposer","undefined","_urlDisposer","element","_numberFormatter","_focusFilter","stroke","clonedFrom","fill","id","map","removeKey","_filters","removeValue","_alwaysShowDisposers","set","children","child","isTemplate","applyAccessibility","_topParent","topParent","_parent","oldParent","baseId","_tooltipContainer","tooltipContainer","_dataItem","dataItem","handleAlwaysShowTooltip","handleAlwaysShow","sprite","oldDisposers","oldDisposer","disposer","on","addDisposer","_virtualParent","appendDefs","filterElement","appendDef","fill_1","modify","stroke_1","_clipPath","top","_map","delayedMap","_delayedMap","_id","hasKey","Error","setKey","node","_paper","setPaper","_htmlContainer","_titleElement","add","_descriptionElement","onAll","setSVGAttributes","opacity","fillOpacity","strokeOpacity","shapeRendering","strokeDasharray","strokeDashoffset","strokeLinecap","strokeLinejoin","focusable","tabindex","role","setSVGAttribute","attribute","removeAttr","classNamePrefix","addClass","uidAttr","updateClipPath","mask","createClipPath","getUniqueId","pixelWidth","pixelHeight","point","width_1","height_1","removeChildNodes","appendPrimitives","w","h","removeClipPath","removeDispose","setElement","_element","removeElement","SVGPathElement","svgContainer","definedBBox","svgBBox","getBBox","updateCenter","prevElementTransform","bbox","elementX","elementY","elementWidth","elementHeigth","pixelPaddingLeft","pixelPaddingRight","pixelPaddingTop","pixelPaddingBottom","measuredWidth","measuredHeight","left","right","top_1","bottom","pixelPerfect","positionPrecision","svg","matrix","createSVGMatrix","a","c","e","b","d","f","p1","createSVGPoint","p2","p3","p4","pt1","matrixTransform","pt2","pt3","pt4","Math","min","max","isHover","tooltipText","tooltipHTML","insertBefore","index","indexOf","moveValue","sortChildren","insertAfter","getRelativeX","innerWidth","getRelativeY","innerHeight","getPixelX","pixel","relative","getPixelY","isDragged","apply","inited","reset","rect","hitTest","ax1","ay1","ax2","ay2","bx1","by1","bx2","by2","_states","state","processState","getKey","hiddenState","create","event","newValue","name","hoverable","clickable","clones","values","length_1","_animations","getSvgPoint","getBoundingClientRect","animate","animationOptions","duration","easing","start","transitionDuration","isHidden","setVisibility","isActive","transitionEasing","transitTo","applyCurrentState","animation","isDown","downPointers","isFocused","transition","options","propValues","allValues","propertyName","finalValue","currentValue","option","from","to","property","isFinished","newFilters_1","stateFilter","newFilter","currentFilter","pushAll","isInTransition","animations","isInteractive","handleOver","isRealHover","handleOut","handleDown","handleUp","handleFocus","handleBlur","setActive","current","setDisabled","hasChild","deepInvalidate","_background","numberFormatter","language","_dateFormatter","dateFormatter","_durationFormatter","durationFormatter","ev","exporting","populateString","string","tags","escape","match","tag","replace","getTagValue","split","join","unescape","tagName","format","matches","parts","reg","exec","prop","params","reg2","matches2","method","getTagValueFromObject","dataContext","component","populateStringFrom","object","formatApplied","len","part","numberValue","dateValue","parse","getTime","durationValue","encodeURIComponent","formatParts","formatterType","setDataItem","dataContext_1","config","dataContext_2","dataContext2_1","fieldValue","propValue","setColorProperty","toString","setPercentProperty","transform","precision","floor","isEnabled","event_1","type","target","length_2","bind","bindToProperty","modifier","observe","listener","context","title","readerTitle","description","readerDescription","readerHidden","checked","readerChecked","controls","readerControls","live","readerLive","orientation","readerOrientation","valueNow","readerValueNow","valueText","readerValueText","labelledByIds","describedByIds","labelledBy","readerLabelledBy","describedBy","readerDescribedBy","titleElement","titleId","textContent","descriptionId","descriptionElement","keyboardOptions","mouseOptions","_interaction","interaction","getInteraction","dom","trackable","draggable","swipeable","resizable","wheelable","contextMenuDisabled","inert","_tabindex","setEventDisposer","hasFocused","focusFilter","hoverOnFocus","inertiaOptions","applyCursorStyle","handleDragStart","handleDragMove","handleDragStop","isTouchProtected","touch","originalPosition","dragStart","pointer","dragStop","cssScale","shift","hoverOptions","_outTimeout","SVGContainer","targetSprite","keepTargetHover","setTimeout","handleOutReal","hitOptions","originalAngle","originalScale","body","once","handleToggle","urlHandler","cursorOverStyle","_baseId","setBaseId","baseSprite","url","urlTarget","window","location","href","open","swipeOptions","handleResize","svgPoint1","point1","svgPoint2","point2","svgMidPoint","parentPoint1","startPoint1","parentPoint2","startPoint2","spritePoint1","spritePoint2","spriteMidPoint","parentPoint","cursorOptions","style","overStyle","defaultStyle","applyCursorOverStyle","downStyle","pointerEvents","getExporting","exp","_export","nonExportableSprites","modalPrefix","modal","has","openModal","text","closeModal","popups","template","openPopup","closeAllPopups","minX","maxX","minY","maxY","invalidateLayout","maxWidth","parentWidth","layout","align","pixelMarginLeft","pixelMarginRight","setMaxWidth","prevWidth","prevHeight","maxHeight","relativeWidth","event_2","previousWidth","previousHeight","parentHeight","valign","pixelMarginTop","pixelMarginBottom","setMaxHeight","relativeHeight","event_3","percentWidth","percent","_pixelWidth","Number","percentHeight","_relativeHeight","_pixelHeight","minWidth","minHeight","_relativeWidth","margin","marginTop","marginRight","marginBottom","marginLeft","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","setPath","setFill","realFill","setStroke","realStroke","hex","_rtl","rtl","show","showReal","_hideAnimation","kill","_showHideDisposer","hideReal","currentSprite","getVisibility","event_4","toFront","toBack","tooltipDataItem","_tooltipDataItem","_tooltipColorSource","tooltipPosition","lastPointer","colorSource_1","tooltipColorSource_1","tooltipColorSource","getStrokeFromObject","getFillFromObject","sprites","background","animationDuration","label","rgb","autoTextColor","alternative","html","currentText","globalPoint","getTooltipX","getTooltipY","pointTooltipTo","instantly","showInViewport","pointTo","raiseCriticalError","closable","content","message","verbose","console","log","processConfig","getCursorStyle","cursorDowntyle","processDelayedMap","grab","grabbing","horizontalResize","verticalResize","configOrder","setShowOnInit","_showOnInitDisposer","hideInitially","appear","_plugins","init","_systemUpdate","skippedSprites","_systemCheckIfValidate","_systemValidatePositions","_systemValidateLayouts","registeredClasses"],"mappings":"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","file":"3c7ab785-5f5263d0fa2c04823e1c.js","sourcesContent":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.function.bind\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.index-of\";\nimport \"core-js/modules/es6.array.map\";\nimport \"core-js/modules/es6.array.fill\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.object.define-property\";\n\n/**\r\n * This is the main class that encapsulates every object on the chart.\r\n *\r\n * If it's an element that is to be displayed on the screen at some point, its\r\n * class must extend [[Sprite]] class.\r\n */\nimport { __extends, __values } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { SpriteState } from \"./SpriteState\";\nimport { SpriteEventDispatcher } from \"./SpriteEvents\";\nexport { SpriteEventDispatcher };\nimport { BaseObjectEvents } from \"./Base\";\nimport { Adapter } from \"./utils/Adapter\";\nimport { Dictionary, DictionaryTemplate, DictionaryDisposer } from \"./utils/Dictionary\";\nimport { ListDisposer, List } from \"./utils/List\";\nimport { MultiDisposer, Disposer, MutableValueDisposer } from \"./utils/Disposer\";\nimport { Animation, AnimationDisposer } from \"./utils/Animation\";\nimport { getGhostPaper } from \"./rendering/Paper\";\nimport { Container } from \"./Container\";\nimport { Pattern } from \"./rendering/fills/Pattern\";\nimport { LinearGradient } from \"./rendering/fills/LinearGradient\";\nimport { RadialGradient } from \"./rendering/fills/RadialGradient\";\nimport { Color, color, toColor } from \"./utils/Color\";\nimport { getInteraction } from \"./interaction/Interaction\";\nimport { MouseCursorStyle } from \"./interaction/Mouse\";\nimport { options } from \"./Options\";\nimport { registry } from \"./Registry\";\nimport { NumberFormatter } from \"./formatters/NumberFormatter\";\nimport { DateFormatter } from \"./formatters/DateFormatter\";\nimport { DurationFormatter } from \"./formatters/DurationFormatter\";\nimport { getTextFormatter } from \"./formatters/TextFormatter\";\nimport { Language } from \"./utils/Language\";\nimport { Export } from \"./export/Export\";\nimport * as $utils from \"./utils/Utils\";\nimport * as $math from \"./utils/Math\";\nimport * as $strings from \"./utils/Strings\";\nimport * as $array from \"./utils/Array\";\nimport * as $object from \"./utils/Object\";\nimport * as $type from \"./utils/Type\";\nimport * as $iter from \"./utils/Iterator\";\nimport { system } from \"./System\";\nimport { Percent, percent } from \"./utils/Percent\";\n/**\r\n * Defines list ofvisual properties\r\n */\n\nexport var visualProperties = [\"fill\", \"fillOpacity\", \"stroke\", \"strokeOpacity\", \"strokeWidth\", \"strokeDasharray\", \"strokeDashoffset\", \"strokeLinecap\", \"strokeLinejoin\"]; // do not add opacity here, as it is used for showing/hiding\n\n;\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Sprite represents any displayable element.\r\n *\r\n * This is the main class that encapsulates every object on the chart.\r\n *\r\n * If it's an element that is to be displayed on the screen at some point, its\r\n * class must extend [[Sprite]] class.\r\n *\r\n * [[Sprite]] class represents the a hierarchical structure. Every object that\r\n * extends [[Sprite]] can have children, that would inherit their properties,\r\n * such as language, formatters, etc.\r\n *\r\n * @see {@link SpriteState}\r\n * @see {@link ISpriteEvents} for a list of available events\r\n * @see {@link ISpriteAdapters} for a list of available Adapters\r\n *\r\n * @todo Review child elements that need to go into `_disposers`\r\n * @important\r\n */\n\nvar Sprite =\n/** @class */\nfunction (_super) {\n  __extends(Sprite, _super);\n  /**\r\n   * Constructor:\r\n   * * Creates initial node\r\n   * * Sets default properties\r\n   * * Creates required default states\r\n   * * Inits accessibility\r\n   */\n\n\n  function Sprite() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Holds values for Sprite's properties.\r\n     */\n\n\n    _this.properties = {};\n    /**\r\n     * @ignore\r\n     */\n\n    _this._eventDispatcher = new SpriteEventDispatcher(_this);\n    /**\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n\n    _this._bindings = {};\n    /**\r\n     * Holds indicator if this Sprite is a \"template\" to be used for creating\r\n     * other Sprites from and should not be treated as full-fledged element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._isTemplate = false;\n    _this._isPath = false;\n    /**\r\n     * Holds indicator whether this sprite was already initialized.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._inited = false;\n    /**\r\n     * Holds indicator whether this sprite was already initialized and ready.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._ready = false;\n    /**\r\n     * If `sprite.hide()` is called and we have \"hidden\" state and\r\n     * `transitionDuration > 0`, we set `isHiding` flag to `true` in order to\r\n     * avoid restarting animations in case `hide()` method is called multiple\r\n     * times.\r\n     */\n\n    _this.isHiding = false;\n    /**\r\n     * If `sprite.hide()` is called, we set isHidden to true when sprite is hidden.\r\n     * This was added becaus hidden state might have visibility set to true and so\r\n     * there would not be possible to find out if a sprite is technically hidden or not.\r\n     */\n\n    _this._isHidden = false;\n    /**\r\n     * This property indicates if Sprite is currently being revealed from hidden\r\n     * state. This is used to prevent multiple calls to `sprite.show()` to\r\n     * restart reveal animation. (if enabled)\r\n     */\n\n    _this.isShowing = false;\n    /**\r\n     * Indicates if this element is a standalone instance. A \"standalone\r\n     * instance\" means this is a autonomous object which maintains its own\r\n     * set of controls like Preloader, Export, etc.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this.isStandaloneInstance = false;\n    /**\r\n     * Indicates if togglable Sprite is currently active (toggled on).\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._isActive = false;\n    /**\r\n     * A Sprite element to use as a mask for this Sprite.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._mask = new MutableValueDisposer();\n    /**\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n\n    _this._positionPrecision = 3;\n    /**\r\n     * An instance of [[Language]].\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._language = new MutableValueDisposer();\n    /**\r\n     * Holds [[Export]] object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._exporting = new MutableValueDisposer();\n    /**\r\n     * Should this Sprite be included when exporting?\r\n     */\n\n    _this._exportable = true;\n    /**\r\n     * Defines bounding box (square) for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._bbox = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n    /**\r\n     * Indicates if this element is invalid and should be re-validated (redrawn).\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this.invalid = false;\n    /**\r\n     * Indicates if this elements position is invalid and should be repositioned\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this.positionInvalid = false;\n    /**\r\n     * A collection of key/value pairs that can be used to bind specific Sprite\r\n     * properties to [[DataItem]].\r\n     *\r\n     * For example: `fill` property can be bound to `myCustomColor` field in\r\n     * DataItem. The Sprite will automatically get the value for `fill` from its\r\n     * DataItem.\r\n     *\r\n     * Can be set for each [[SpriteState]] individually to override default\r\n     * bindings.\r\n     *\r\n     * @see {@link SpriteState}\r\n     */\n\n    _this.propertyFields = {};\n    /**\r\n     * Specifies if property changes on this object should be propagated to the\r\n     * objects cloned from this object.\r\n     *\r\n     * This setting affects property changes *after* cloning, since at the moment\r\n     * of cloning all of properties from source object are copied to the clone\r\n     * anyway.\r\n     *\r\n     * @default false\r\n     */\n\n    _this.applyOnClones = false; // unrotated unscaled\n\n    _this._measuredWidthSelf = 0;\n    _this._measuredHeightSelf = 0; // read only, sprite extreme coordinates\n\n    /**\r\n     * @ignore\r\n     */\n\n    _this.maxLeft = 0;\n    /**\r\n     * @ignore\r\n     */\n\n    _this.maxRight = 0;\n    /**\r\n     * @ignore\r\n     */\n\n    _this.maxTop = 0;\n    /**\r\n     * @ignore\r\n     */\n\n    _this.maxBottom = 0; // not rotated and not scaled\n\n    /**\r\n     * @ignore\r\n     */\n\n    _this.maxLeftSelf = 0;\n    /**\r\n     * @ignore\r\n     */\n\n    _this.maxRightSelf = 0;\n    /**\r\n     * @ignore\r\n     */\n\n    _this.maxTopSelf = 0;\n    /**\r\n     * @ignore\r\n     */\n\n    _this.maxBottomSelf = 0;\n    _this._isDragged = false;\n    _this._isResized = false;\n    /**\r\n     * @deprecated Moved to [[SpriteProperties]]\r\n     */\n\n    _this._disabled = false;\n    _this._internalDisabled = false;\n    _this._updateDisabled = false;\n    _this._internalDefaultsApplied = false;\n    /**\r\n     * Time in milliseconds after which rollout event happens when user rolls-out of the sprite. This helps to avoid flickering in some cases.\r\n     */\n\n    _this.rollOutDelay = 0;\n    /**\r\n     * This flag is set to `true` for the initial sprite you create and place\r\n     * to the div so that we could clear all additional\r\n     * sprites/containers when this sprite is disposed.\r\n     *\r\n     * @ignore\r\n     */\n\n    _this.isBaseSprite = false;\n    /**\r\n     * Indicates whether this sprite should be cloned when cloning its parent\r\n     * container. We set this to `false` in those cases when a sprite is created\r\n     * by the class, so that when cloning a duplicate sprite would not appear.\r\n     */\n\n    _this.shouldClone = true;\n    /**\r\n     * A read-only flag which indicates if a sprite has completed its initial\r\n     * animation (if `showOnInit = true`).\r\n     *\r\n     * In case `showOnInit = false`, `appeared` is set to `true` on init.\r\n     *\r\n     * @readonly\r\n     */\n\n    _this.appeared = false;\n    /**\r\n     * [ex description]\r\n     *\r\n     * @todo Description\r\n     * @ignore\r\n     */\n\n    _this.ex = 0;\n    /**\r\n     * [ey description]\r\n     *\r\n     * @todo Description\r\n     * @ignore\r\n     */\n\n    _this.ey = 0;\n    /**\r\n     * Indicates if the sprite can be moved around when resizing it with two fingers (will only work if draggable = false)\r\n     * @ignore\r\n     */\n\n    _this.dragWhileResize = false;\n    /**\r\n     *  @ignore\r\n     */\n\n    _this.measureFailed = false;\n    /**\r\n     * If this flag is set to true, calling show() will not reveal the sprite.\r\n     *\r\n     * @ignore\r\n     */\n\n    _this.preventShow = false;\n    /**\r\n     * When cloning a sprite, if the template has it's own tooltip assigned, this tooltip is also cloned by default.\r\n     * This is not good for cpu and sometimes you might only need one single tooltip for all clones. Set this to false in order not to clone tooltip.\r\n     */\n\n    _this.cloneTooltip = true;\n    _this.className = \"Sprite\";\n\n    _this._disposers.push(_this._eventDispatcher); // Generate a unique ID\n\n\n    $utils.used(_this.uid); // Create SVG group to hold everything in\n\n    _this.group = _this.paper.addGroup(\"g\"); // Set defaults\n    // it is better to set defauls like this in order to save invaliation calls and events\n\n    _this.setPropertyValue(\"scale\", 1);\n\n    _this.setPropertyValue(\"rotation\", 0);\n\n    _this.setPropertyValue(\"align\", \"none\");\n\n    _this.setPropertyValue(\"valign\", \"none\");\n\n    _this.setPropertyValue(\"pixelPerfect\", false);\n\n    _this.setPropertyValue(\"visible\", true);\n\n    _this.setPropertyValue(\"tooltipPosition\", \"fixed\");\n\n    _this.setPropertyValue(\"verticalCenter\", \"none\");\n\n    _this.setPropertyValue(\"horizontalCenter\", \"none\");\n\n    _this.setPropertyValue(\"tooltipX\", percent(50));\n\n    _this.setPropertyValue(\"tooltipX\", percent(50));\n\n    _this.setPropertyValue(\"marginTop\", 0);\n\n    _this.setPropertyValue(\"marginBottom\", 0);\n\n    _this.setPropertyValue(\"marginLeft\", 0);\n\n    _this.setPropertyValue(\"marginRight\", 0);\n\n    _this.setPropertyValue(\"dx\", 0);\n\n    _this.setPropertyValue(\"dy\", 0);\n\n    _this.setPropertyValue(\"paddingTop\", 0);\n\n    _this.setPropertyValue(\"paddingBottom\", 0);\n\n    _this.setPropertyValue(\"paddingRight\", 0);\n\n    _this.setPropertyValue(\"paddingLeft\", 0);\n\n    _this.setPropertyValue(\"togglable\", false);\n\n    _this.setPropertyValue(\"hidden\", false);\n\n    _this.setPropertyValue(\"urlTarget\", \"_self\");\n\n    _this.setPropertyValue(\"alwaysShowTooltip\", false);\n\n    _this.setPropertyValue(\"showTooltipOn\", \"hover\");\n\n    _this._prevMeasuredWidth = 0;\n    _this._prevMeasuredHeight = 0;\n    _this._measuredWidth = 0;\n    _this._measuredHeight = 0;\n    _this._isMeasured = true; // Invalidate the Sprite so that renderer knows it needs to be drawn\n\n    _this.invalidate(); //this.states.create(\"default\").properties.opacity = 1;\n    // Apply the theme\n\n\n    _this.applyTheme(); //this._disposers.push(this._clickable);\n    // Decorate adapter with events so that we can apply its settings whenever\n    // it is modified\n    // @todo Think what to do here. We can't just apply the adapter value to\n    // property since not all of those are for properties. Commented out for\n    // now.\n\n    /*this.adapter.events.on(\"inserted\", (ev: any) => {\r\n        (<any>this)[ev.newValue.key] = (<any>this)[ev.newValue.key];\r\n    });\r\n    this.adapter.events.on(\"removed\", (ev: any) => {\r\n        (<any>this)[ev.newValue.key] = (<any>this)[ev.newValue.key];\r\n    });*/\n    // Add disposable dependencies to `_disposers` so they are automatically\n    // disposed of when this object is disposed\n\n\n    _this._disposers.push(_this.events);\n\n    _this._disposers.push(_this.group);\n\n    _this._disposers.push(_this._mask);\n\n    _this._disposers.push(_this._language);\n\n    _this._disposers.push(_this._exporting); //this._disposers.push(this._parent);\n    //this._disposers.push(this._modal);\n\n\n    _this._disposers.push(new Disposer(function () {\n      $object.each(_this._bindings, function (key, value) {\n        value.dispose();\n      });\n    }));\n\n    _this.setPropertyValue(\"interactionsEnabled\", true);\n\n    return _this;\n  }\n\n  Object.defineProperty(Sprite.prototype, \"events\", {\n    /**\r\n     * Event dispatcher.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/event-listeners/} for more info about Events\r\n     */\n    get: function get() {\n      return this._eventDispatcher;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"adapter\", {\n    /**\r\n     * Holds Adapter.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/adapters/} for more info about Adapters\r\n     */\n    get: function get() {\n      if (!this._adapterO) {\n        this._adapterO = new Adapter(this);\n      }\n\n      return this._adapterO;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * ==========================================================================\r\n   * ELEMENT VALIDATION, INIT, AND DRAWING STUFF\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Applies properties from all assigned themes.\r\n   *\r\n   * We do this here so that we can apply class names as well.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Sprite.prototype.applyTheme = function () {\n    _super.prototype.applyTheme.call(this);\n\n    if (options.autoSetClassName) {\n      this.setClassName();\n    }\n  };\n  /**\r\n   * Returns theme(s) used by this object either set explicitly on this\r\n   * element, inherited from parent, or inherited from [[System]].\r\n   *\r\n   * @return An array of theme references\r\n   */\n\n\n  Sprite.prototype.getCurrentThemes = function () {\n    var themes = this._themes;\n\n    if (themes) {\n      return themes;\n    } else {\n      var parent_1 = this.parent;\n\n      if (parent_1) {\n        return parent_1.getCurrentThemes();\n      } else {\n        return registry.themes;\n      }\n    }\n  };\n  /**\r\n   * Called just before element's validation, this function allows setting\r\n   * defaults.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.applyInternalDefaults = function () {\n    // Nothing here, but extending classes might override this function\n    // so that they can set their defaults\n    this._internalDefaultsApplied = true;\n  };\n  /**\r\n   * Invalidates element.\r\n   *\r\n   * Object will be redrawn during the next update cycle.\r\n   *\r\n   * Please note that in most cases elements will auto-invalidate when needed. If\r\n   * everything works, DO NOT use this method. Use it only if some changes do\r\n   * not take otherwise.\r\n   */\n\n\n  Sprite.prototype.invalidate = function () {\n    if (this.disabled || this._isTemplate) {\n      return;\n    } // We no longer reset this on each invalidate, so that they are applied\n    // only once, and do not overwrite user-defined settings\n    //this._internalDefaultsApplied = false;\n\n\n    if (!this.invalid) {\n      this.invalid = true;\n      registry.addToInvalidSprites(this);\n      system.requestFrame();\n    }\n  };\n  /**\r\n   * Validates element:\r\n   * * Triggers events\r\n   * * Redraws the element\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.validate = function () {\n    this.dispatchImmediately(\"beforevalidated\"); // prevents from drawing if topparent is 0x0\n\n    /*\r\n    let topParent = this.topParent;\r\n      if (topParent) {\r\n        if (!topParent.maxWidth || !topParent.maxHeight) {\r\n            this._disposers.push(topParent.events.once(\"maxsizechanged\", this.invalidate, this));\r\n        }\r\n    }*/\n    // Set internal defaults\n\n    if (!this._internalDefaultsApplied) {\n      this.applyInternalDefaults();\n    }\n\n    this.beforeDraw();\n    this.draw();\n    this.invalid = false;\n    registry.removeFromInvalidSprites(this);\n    this.afterDraw();\n  };\n  /**\r\n   * Invalidates element's position.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.invalidatePosition = function () {\n    if (this.disabled || this._isTemplate) {\n      return;\n    }\n\n    if (!this.positionInvalid) {\n      this.positionInvalid = true;\n      registry.addToInvalidPositions(this);\n      system.requestFrame();\n    }\n  };\n  /**\r\n   * Transforms the element.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.validatePosition = function () {\n    var pixelX = this.pixelX;\n    var pixelY = this.pixelY;\n    var dx = this.dx;\n    var dy = this.dy;\n    var x = pixelX + dx;\n    var y = pixelY + dy;\n\n    if (this._updateDisabled) {\n      if (this._internalDisabled) {\n        this.group.attr({\n          \"display\": \"none\"\n        });\n      } else {\n        if (!this.disabled) {\n          this.removeSVGAttribute(\"display\");\n        }\n      }\n\n      this._updateDisabled = false;\n    }\n\n    var sizeChanged = this.measure(); //if (!this.invalid) {\n\n    var prevGroupTransform = this.group.transformString;\n    this.group.moveTo({\n      x: x,\n      y: y\n    });\n    this.group.rotation = this.rotation;\n\n    if (this.nonScaling) {\n      this.group.scale = this.scale / this.globalScale;\n    } else {\n      this.group.scale = this.scale;\n    }\n\n    if (prevGroupTransform != this.group.transformString || sizeChanged) {\n      // not yet sure, this is to avoid many transforms=>container layout invalidation on initial buid\n      if (prevGroupTransform == null) {\n        this.dispatch(\"transformed\");\n      } else {\n        this.dispatchImmediately(\"transformed\");\n      } // TODO clear existing positionchanged dispatches ?\n\n\n      this.dispatch(\"positionchanged\");\n\n      if (this.showTooltipOn == \"hit\" || this.showTooltipOn == \"always\") {\n        this.updateTooltipPosition();\n      }\n    } //}\n    // it might happen that x and y changed again, so we only remove if they didn't\n\n\n    if (pixelX + dx == x && pixelY + dy == y) {\n      registry.removeFromInvalidPositions(this);\n      this.positionInvalid = false;\n    }\n\n    var maskRectangle = this._maskRectangle; // todo: verify this\n\n    if (maskRectangle) {\n      this._clipElement.moveTo({\n        x: maskRectangle.x - pixelX,\n        y: maskRectangle.y - pixelY\n      });\n    }\n  };\n  /**\r\n   * A placeholder method that is called **before** element begins to be drawn.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.beforeDraw = function () {};\n  /**\r\n   * A placeholder method that draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.draw = function () {};\n  /**\r\n   * A placeholder method that is called **after** element finishes drawing\r\n   * itself.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.afterDraw = function () {\n    var e_1, _a;\n\n    if (this.isMeasured || this.horizontalCenter !== \"none\" || this.verticalCenter !== \"none\") {\n      this.measureElement();\n    } //this.applyMask();\n\n\n    if (!this._inited) {\n      if (this._adapterO) {\n        try {\n          // used to be applySVGAttrbutes here, this is more efficient\n          for (var _b = __values(this._adapterO.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var key = _c.value;\n\n            switch (key) {\n              case \"mask\":\n              case \"fill\":\n              case \"opacity\":\n              case \"fillOpacity\":\n              case \"stroke\":\n              case \"strokeOpacity\":\n              case \"strokeWidth\":\n              case \"shapeRendering\":\n              case \"strokeDasharray\":\n              case \"strokeDashoffset\":\n              case \"strokeLinecap\":\n              case \"strokeLinejoin\":\n              case \"textDecoration\":\n              case \"fontSize\":\n              case \"fontFamily\":\n              case \"fontWeight\":\n                //case \"focusable\":\n                //case \"tabindex\":\n                //case \"role\":\n                this[key] = this[key];\n                break;\n            }\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (_c && !_c.done && (_a = _b[\"return\"])) _a.call(_b);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n      }\n\n      this.applyFilters();\n      this.visible = this.visible;\n      this.interactionsEnabled = this.getPropertyValue(\"interactionsEnabled\"); // can't use .interactionsEnabled as it get's parent's\n\n      this._inited = true;\n\n      if (!this.showOnInit) {\n        this.appeared = true;\n      }\n\n      if (this.hidden) {\n        this.hide(0);\n      }\n\n      this.applyMask();\n      this.dispatch(\"validated\");\n      this.dispatch(\"inited\");\n      this.dispatchReady();\n    } else {\n      this.dispatch(\"validated\");\n    }\n\n    if (this.showTooltipOn == \"always\") {\n      if (this.visible && !this.disabled && !this.__disabled) {\n        this.showTooltip();\n      } else {\n        this.hideTooltip(0);\n      }\n    }\n  };\n  /**\r\n   * Dispatches `\"ready\"` event. Sprite dispatches it right after `\"inited\"` event.\r\n   *\r\n   * @ignore\r\n   */\n\n\n  Sprite.prototype.dispatchReady = function () {\n    if (!this.isReady()) {\n      this._ready = true;\n      this.dispatch(\"ready\");\n    }\n  };\n  /**\r\n   * Triggers a re-initialization of this element.\r\n   *\r\n   * Will result in complete redrawing of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.reinit = function () {\n    this._inited = false;\n    this.setState(this.defaultState);\n    this.invalidate();\n  };\n  /**\r\n   * Handles the situation where parent element is resized.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.handleGlobalScale = function () {\n    this.dispatch(\"globalscalechanged\");\n\n    if (this.nonScalingStroke) {\n      this.strokeWidth = this.strokeWidth;\n    }\n\n    if (this.nonScaling) {\n      this.validatePosition();\n    }\n\n    this.updateFilterScale();\n  };\n  /**\r\n   * Updates filter properties which might depend on scale\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.updateFilterScale = function () {\n    var _this = this;\n\n    $iter.each(this.filters.iterator(), function (filter) {\n      filter.scale = _this.globalScale;\n    });\n  };\n  /**\r\n   * Removes itself from system's invalid lists.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.removeFromInvalids = function () {\n    registry.removeFromInvalidSprites(this);\n    registry.removeFromInvalidPositions(this);\n  };\n  /**\r\n   * Copies all parameters from another [[Sprite]].\r\n   *\r\n   * @param source Source Sprite\r\n   */\n\n\n  Sprite.prototype.copyFrom = function (source) {\n    var _this = this;\n\n    _super.prototype.copyFrom.call(this, source);\n\n    this.isMeasured = source.isMeasured;\n    this.states.copyFrom(source.states);\n\n    if (source.filters.length > 0) {\n      source.filters.each(function (filter) {\n        _this.filters.push(filter.clone());\n      });\n    }\n\n    if (source._adapterO) {\n      this.adapter.copyFrom(source._adapterO);\n    } //helps to avoid calling getter which creates instance\n\n\n    if (source[\"_interaction\"]) {\n      this.interactions.copyFrom(source.interactions);\n    }\n\n    if (source[\"_plugins\"]) {\n      this.plugins.copyFrom(source.plugins);\n    }\n\n    this.configField = source.configField;\n    this.applyOnClones = source.applyOnClones; // this.numberFormatter = source.numberFormatter; // todo: this creates loose number formatter and copies it to all clones. somehow we need to know if source had numberFormatter explicitly created and not just because a getter was called.\n    //this.mask = source.mask; need to think about this, generally this causes a lot of problems\n\n    this.disabled = source.disabled;\n    this.virtualParent = source.virtualParent;\n    this.exportable = source.exportable; //@todo: create tooltip if it's on source but not on this?\n    //const tooltip = this._tooltip;\n    //if (tooltip) {\n    //\ttooltip.copyFrom(source.tooltip);\n    //}\n\n    if (source._tooltip) {\n      if (this._tooltip) {\n        this._tooltip.copyFrom(source.tooltip);\n      } else {\n        if (source.cloneTooltip) {\n          this.tooltip = source.tooltip.clone();\n        } else {\n          this._tooltip = source.tooltip;\n        }\n      }\n    } //if ((<any>source)[\"_tooltip\"] && !this._tooltip) {\n    //\tthis._tooltip = (<any>source)[\"_tooltip\"];\n    //}\n\n\n    this._showSystemTooltip = source.showSystemTooltip;\n    $utils.copyProperties(source.propertyFields, this.propertyFields);\n    $utils.copyProperties(source.properties, this);\n\n    if (source.fillModifier) {\n      this.fillModifier = source.fillModifier.clone();\n    }\n\n    if (source.strokeModifier) {\n      this.strokeModifier = source.strokeModifier.clone();\n    }\n  };\n  /**\r\n   * Destroys this object and all related data.\r\n   */\n\n\n  Sprite.prototype.dispose = function () {\n    if (!this.isDisposed()) {\n      if (this.showTooltipOn == \"always\" && this.tooltip) {\n        this.tooltip.hide();\n      }\n\n      this.dispatchImmediately(\"beforedisposed\");\n\n      if (this.isBaseSprite) {\n        if (this.htmlContainer) {\n          while (this.htmlContainer.childNodes.length > 0) {\n            this.htmlContainer.removeChild(this.htmlContainer.firstChild);\n          }\n        }\n\n        this.isBaseSprite = false;\n      }\n\n      _super.prototype.dispose.call(this); // Clear adapters\n\n\n      if (this._adapterO) {\n        this._adapterO.clear();\n      }\n\n      if (this.applyOnClones) {\n        if (this._clones) {\n          for (var i = this._clones.length - 1; i >= 0; i--) {\n            var clone = this._clones.getIndex(i);\n\n            clone.dispose();\n          }\n        }\n      }\n\n      if (this._svgContainer) {\n        this._svgContainer.dispose();\n      }\n\n      if (this._interactionDisposer) {\n        this._interactionDisposer.dispose();\n\n        this._interactionDisposer = undefined;\n      }\n\n      if (this._urlDisposer) {\n        this._urlDisposer.dispose();\n      }\n\n      this.removeFromInvalids();\n\n      if (this.element) {\n        this.element.dispose();\n      }\n\n      if (this.group) {\n        this.group.dispose();\n      }\n\n      if (this._numberFormatter) {\n        this._numberFormatter.dispose();\n      }\n\n      if (this._focusFilter) {\n        this._focusFilter.dispose();\n      }\n\n      var stroke = this.stroke;\n\n      if (stroke && !(stroke instanceof Color) && stroke.dispose) {\n        if (this.clonedFrom && this.clonedFrom.stroke == stroke) {// do nothing\n        } else {\n          stroke.dispose();\n        }\n      } // TODO a bit hacky\n\n\n      var fill = this.fill;\n\n      if (fill && !(fill instanceof Color) && fill.dispose) {\n        if (this.clonedFrom && this.clonedFrom.fill == fill) {// do nothing\n        } else {\n          fill.dispose();\n        }\n      } // remove from map\n\n\n      if ($type.hasValue(this.id)) {\n        this.map.removeKey(this.id);\n      }\n\n      this.parent = undefined;\n\n      if (this._filters) {\n        while (this._filters.length > 0) {\n          var filter = this._filters.getIndex(0);\n\n          filter.dispose();\n\n          this._filters.removeValue(filter);\n        }\n      }\n\n      this._alwaysShowDisposers = undefined;\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"isTemplate\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Is template?\r\n     */\n    get: function get() {\n      return this._isTemplate;\n    },\n\n    /**\r\n     * Indicates if this element is a \"template\".\r\n     *\r\n     * Template Sprites act only as a holders for config for other \"real\"\r\n     * elements to be cloned from.\r\n     *\r\n     * Templates are treated differently, as they are not validated, redrawn, or\r\n     * otherwise are processed.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Is template?\r\n     */\n    set: function set(value) {\n      value = $type.toBoolean(value);\n\n      if (this._isTemplate != value) {\n        this._isTemplate = value;\n\n        if (this instanceof Container) {\n          $iter.each(this.children.iterator(), function (child) {\n            child.isTemplate = value;\n          });\n        }\n\n        if (value) {\n          this.parent = this.parent;\n          this.removeFromInvalids();\n        } else {\n          this.invalidate();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"showSystemTooltip\", {\n    /**\r\n     * @return Show system tooltip?\r\n     */\n    get: function get() {\n      if (!$type.hasValue(this._showSystemTooltip)) {\n        if (this.virtualParent) {\n          return this.virtualParent.showSystemTooltip;\n        } else if (this.parent) {\n          return this.parent.showSystemTooltip;\n        } else {\n          return false;\n        }\n      }\n\n      return this._showSystemTooltip;\n    },\n\n    /**\r\n     * Indicates whether the element should attempt to construct itself in a way\r\n     * so that system tooltip is shown if its `readerTitle` is set.\r\n     *\r\n     * @param value Show system tooltip?\r\n     */\n    set: function set(value) {\n      value = $type.toBoolean(value);\n\n      if (this._showSystemTooltip != value) {\n        this._showSystemTooltip = value;\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"topParent\", {\n    /**\r\n     * ==========================================================================\r\n     * HIERARCHY AND STRUCTURE RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Sprites's top-level [[Container]].\r\n     *\r\n     * Please note that in most cases it won't be the chart element.\r\n     *\r\n     * To access base chart element, use `baseSprite` instead.\r\n     *\r\n     * @return Top-level ascendant\r\n     */\n    get: function get() {\n      if (this._topParent) {\n        return this._topParent;\n      } else {\n        if (this.parent) {\n          return this.parent.topParent;\n        }\n      }\n    },\n\n    /**\r\n     * @ignore\r\n     * @param value {Container} top parent of a sprite\r\n     */\n    set: function set(value) {\n      this._topParent = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"parent\", {\n    /**\r\n     * @return Parent container\r\n     */\n    get: function get() {\n      return this._parent;\n    },\n\n    /**\r\n     * Elements' parent [[Container]].\r\n     *\r\n     * @param parent  Parent container\r\n     */\n    set: function set(parent) {\n      if (this._isTemplate) {\n        return;\n      } // TODO is this needed ?\n\n\n      $utils.used(this.paper);\n      var oldParent = this._parent;\n\n      if (oldParent != parent) {\n        if (oldParent) {\n          oldParent.children.removeValue(this);\n        }\n\n        this._parent = parent;\n\n        if (parent) {\n          this.topParent = parent.topParent;\n\n          if (parent.isTemplate) {\n            this.isTemplate = true;\n          }\n\n          this.baseId = parent.baseId;\n          parent.children.push(this); // insert handler at Container invalidates +  invalidatesLayout + adds to group\n\n          if (this._tooltip && !this._tooltipContainer) {\n            this._tooltip.parent = parent.tooltipContainer;\n          }\n\n          if (!this._dataItem) {\n            this.dataItem = parent.dataItem;\n          }\n\n          this.handleAlwaysShowTooltip();\n          this.dispatchImmediately(\"parentset\");\n        } else {\n          this.topParent = undefined;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Sprite.prototype.handleAlwaysShow = function () {\n    this.showTooltip();\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  Sprite.prototype.handleAlwaysShowTooltip = function () {\n    var sprite = this;\n    var oldDisposers = this._alwaysShowDisposers;\n\n    if (oldDisposers) {\n      $array.each(oldDisposers, function (oldDisposer) {\n        oldDisposer.dispose();\n      });\n    }\n\n    this._alwaysShowDisposers = [];\n\n    if (this.showTooltipOn == \"always\") {\n      while (sprite != undefined) {\n        var disposer = sprite.events.on(\"visibilitychanged\", this.handleAlwaysShow, this, false);\n        this.addDisposer(disposer);\n\n        this._alwaysShowDisposers.push(disposer);\n\n        sprite = sprite.parent;\n      }\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"virtualParent\", {\n    /**\r\n     * @return Virtual parent\r\n     */\n    get: function get() {\n      return this._virtualParent;\n    },\n\n    /**\r\n     * Element's \"virtual\" parent.\r\n     *\r\n     * This is required in ordere to maintain proper inheritance (like\r\n     * formatters).\r\n     *\r\n     * Sometimes an element is a \"logical\" parent, even though it's not a direct\r\n     * ascendant.\r\n     *\r\n     * Example: a bullet is not a child of the axis, but it would make sense\r\n     * for it to inherit series' formatters.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Virtual parent\r\n     */\n    set: function set(value) {\n      this._virtualParent = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Moves `<defs>` to correct place in DOM.\r\n   *\r\n   * Some elements are initially created in \"ghost\" container. When moving\r\n   * those into proper place in DOM, their respective `<defs>` need to be moved\r\n   * as well.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Sprite.prototype.appendDefs = function () {\n    if (this.filterElement) {\n      this.paper.appendDef(this.filterElement);\n    }\n\n    var fill = this.fill;\n\n    if (fill && fill.element) {\n      this.paper.appendDef(fill.element);\n    }\n\n    var stroke = this.stroke;\n\n    if (stroke && stroke.element) {\n      this.paper.appendDef(stroke.element);\n    }\n\n    if (this.fillModifier && this.fill instanceof Color) {\n      var fill_1 = this.fillModifier.modify(this.fill);\n\n      if (fill_1 && fill_1.element) {\n        this.paper.appendDef(fill_1.element);\n      }\n    }\n\n    if (this.strokeModifier && this.stroke instanceof Color) {\n      var stroke_1 = this.strokeModifier.modify(this.stroke);\n\n      if (stroke_1 && stroke_1.element) {\n        this.paper.appendDef(stroke_1.element);\n      }\n    }\n\n    if (this._clipPath) {\n      this.paper.appendDef(this._clipPath);\n    }\n\n    if (this._exportable === false) {\n      this.exportable = false;\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"map\", {\n    /**\r\n     * Returns a [[Dictionary]] which maps object ids with their respective\r\n     * objects.\r\n     *\r\n     * Can be used to retrieve any object by id, e.g.:\r\n     *\r\n     * ```TypeScript\r\n     * console.log(mySprite.map.getKey(\"myid\"));\r\n     * ```\r\n     * ```JavaScript\r\n     * console.log(mySprite.map.getKey(\"myid\"));\r\n     * ```\r\n     *\r\n     * @return Map collection\r\n     */\n    get: function get() {\n      var top = this.topParent;\n\n      if (top) {\n        return top.map;\n      } else if (!this._map) {\n        this._map = new Dictionary();\n      }\n\n      return this._map;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"delayedMap\", {\n    /**\r\n     * @ignore\r\n     * @return Map collection\r\n     */\n    get: function get() {\n      var top = this.topParent;\n\n      if (top) {\n        return top.delayedMap;\n      } else if (!this._delayedMap) {\n        this._delayedMap = new Dictionary();\n      }\n\n      return this._delayedMap;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"id\", {\n    /**\r\n     * @return ID\r\n     */\n    get: function get() {\n      return this._id;\n    },\n\n    /**\r\n     * Element's user-defined ID.\r\n     *\r\n     * Will throw an Error if there already is an object with the same ID.\r\n     *\r\n     * Please note that above check will be performed withing the scope of the\r\n     * current chart instance. It will not do checks across other chart instances\r\n     * or in globally in DOM.\r\n     *\r\n     * Make sure the IDs are unique.\r\n     *\r\n     * @param value ID\r\n     */\n    set: function set(value) {\n      if (this._id != value) {\n        this._id = value;\n\n        if (this.map.hasKey(value)) {\n          throw Error(\"Duplicate id (\" + value + \") used on multiple objects.\");\n        } else {\n          this.map.setKey(value, this);\n        }\n\n        if (options.autoSetClassName) {\n          this.setClassName();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"dom\", {\n    /**\r\n     * ==========================================================================\r\n     * ELEMENT AND DOM TREE MANIPULATION AND MEASURING\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Returns DOM element reference associated with this element.\r\n     *\r\n     * @readonly\r\n     * @return DOM element\r\n     */\n    get: function get() {\n      return this.group.node;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"paper\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Paper\r\n     */\n    get: function get() {\n      if (this._paper) {\n        return this._paper;\n      } else {\n        if (this.parent) {\n          return this.parent.paper;\n        }\n      }\n\n      return getGhostPaper();\n    },\n\n    /**\r\n     * A [[Paper]] instance to place elements on.\r\n     *\r\n     * If there's no Paper set for this element, it goes up the ascendant tree\r\n     * until it finds one.\r\n     *\r\n     * This method is used by important `addChild()` method, so it's essential\r\n     * to have a [[Paper]] instance.\r\n     *\r\n     * If this element has a separate `htmlContainer` set, it will have a\r\n     * [[Paper]] instance itself.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param paper  Paper\r\n     */\n    set: function set(paper) {\n      this.setPaper(paper);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets [[Paper]] instance to use to draw elements.\r\n   * @ignore\r\n   * @param paper Paper\r\n   * @return true if paper was changed, false, if it's the same\r\n   */\n\n  Sprite.prototype.setPaper = function (paper) {\n    var oldPaper = this._paper;\n\n    if (oldPaper != paper) {\n      this._paper = paper;\n      this.appendDefs();\n      return true;\n    }\n\n    return false;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"htmlContainer\", {\n    /**\r\n     * @return HTML element\r\n     */\n    get: function get() {\n      if (this._htmlContainer) {\n        return this._htmlContainer;\n      } else {\n        if (this.parent) {\n          return this.parent.htmlContainer;\n        }\n      }\n    },\n\n    /**\r\n     * An HTML element to be used when placing wrapper element (`<div>`)\r\n     * for the whole chart.\r\n     *\r\n     * This is the same for **all** elements within the same chart.\r\n     *\r\n     * @param htmlContainer HTML element\r\n     */\n    set: function set(htmlContainer) {\n      this._htmlContainer = htmlContainer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"titleElement\", {\n    /**\r\n     * Creates (if not yet created) and returns element's `<title>` element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Title element\r\n     */\n    get: function get() {\n      if (!this._titleElement) {\n        this._titleElement = this.paper.add(\"title\");\n        this.group.add(this._titleElement);\n      }\n\n      return this._titleElement;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"descriptionElement\", {\n    /**\r\n     * Creates (if not yet created) and returns element's `<desc>` element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Desc element\r\n     */\n    get: function get() {\n      if (!this._descriptionElement) {\n        this._descriptionElement = this.paper.add(\"desc\");\n        this.group.add(this._descriptionElement);\n      }\n\n      return this._descriptionElement;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"filters\", {\n    /**\r\n     * Returns list of SVG filters (effects) applied to element. If the filter\r\n     * list is not yet initilized, creates and returns an empty one.\r\n     * Note, not all filters combine well with one another. We recommend using one filter per sprite.\r\n     *\r\n     * @return List of filters\r\n     */\n    get: function get() {\n      if (!this._filters) {\n        this._filters = new List(); // TODO only add certain events ?\n\n        this._disposers.push(this._filters.events.onAll(this.applyFilters, this));\n\n        this._disposers.push(new ListDisposer(this._filters));\n      }\n\n      return this._filters;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets required SVG attributes. Must be called every time an element is\r\n   * redrawn so that attributes are (re)applied.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Sprite.prototype.setSVGAttributes = function () {\n    this.fill = this.fill;\n    this.opacity = this.opacity;\n    this.fillOpacity = this.fillOpacity;\n    this.stroke = this.stroke;\n    this.strokeOpacity = this.strokeOpacity;\n    this.shapeRendering = this.shapeRendering;\n    this.strokeDasharray = this.strokeDasharray;\n    this.strokeDashoffset = this.strokeDashoffset;\n    this.strokeLinecap = this.strokeLinecap;\n    this.strokeLinejoin = this.strokeLinejoin;\n    this.focusable = this.focusable;\n    this.tabindex = this.tabindex;\n    this.role = this.role;\n  };\n  /**\r\n   * Sets an attribute directly on an SVG element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param attribute Attribute object\r\n   */\n\n\n  Sprite.prototype.setSVGAttribute = function (attribute) {\n    this.group.attr(attribute);\n  };\n  /**\r\n   * Removes an attribute directly from SVG element.\r\n   *\r\n   * @param attribute Attribute key to remove\r\n   */\n\n\n  Sprite.prototype.removeSVGAttribute = function (attribute) {\n    this.group.removeAttr(attribute);\n  };\n  /**\r\n   * Sets `class` attribute of the elements SVG node.\r\n   *\r\n   * Uses `am4core.options.classNamePrefix`.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.setClassName = function () {\n    var className = this.className;\n    var classNamePrefix = options.classNamePrefix;\n\n    if (this.element) {\n      this.element.addClass(classNamePrefix + className);\n    }\n\n    this.group.addClass(classNamePrefix + className + \"-group\");\n\n    if ($type.hasValue(this.id)) {\n      this.group.addClass(classNamePrefix + this.id);\n    }\n  };\n  /**\r\n   * Adds an `id` attribute the the element and returns the id.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Element's ID\r\n   */\n\n\n  Sprite.prototype.uidAttr = function () {\n    this.setSVGAttribute({\n      \"id\": this.uid\n    });\n    return this.uid;\n  };\n  /**\r\n   * [updateClipPath description]\r\n   *\r\n   * @todo Description\r\n   */\n\n\n  Sprite.prototype.updateClipPath = function () {\n    var element = this._clipElement;\n\n    if (element) {\n      element.moveTo({\n        x: this.mask.pixelX,\n        y: this.mask.pixelY\n      });\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  Sprite.prototype.createClipPath = function () {\n    if (!this._clipPath) {\n      this._clipPath = this.paper.addGroup(\"clipPath\");\n      this.paper.appendDef(this._clipPath);\n\n      this._disposers.push(this._clipPath);\n\n      var id = registry.getUniqueId();\n\n      this._clipPath.attr({\n        \"id\": id\n      });\n\n      this.group.attr({\n        \"clip-path\": \"url(\\\"\" + $utils.getBaseURI() + id + \"\\\")\"\n      });\n    }\n  };\n  /**\r\n   * Applies the mask Sprite.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.applyMask = function () {\n    var mask = this.mask;\n\n    if (this._clipPath && mask) {\n      // Container\n      if (mask instanceof Container) {\n        this._clipElement.attr({\n          \"width\": $math.max(0, mask.pixelWidth),\n          \"height\": $math.max(0, mask.pixelHeight)\n        });\n\n        var point = $utils.spritePointToSprite({\n          x: mask.pixelX,\n          y: mask.pixelY\n        }, mask.parent, this);\n        this._clipPath.x = point.x;\n        this._clipPath.y = point.y;\n      } // Sprite\n      else {\n          if (mask.element && mask.element != this._clipElement) {\n            this._clipElement = mask.element;\n\n            this._clipPath.add(this._clipElement);\n          }\n\n          this._clipPath.scale = mask.scale;\n          this._clipPath.x = mask.pixelX;\n          this._clipPath.y = mask.pixelY;\n          this._clipPath.rotation = mask.rotation;\n        }\n    }\n  };\n  /**\r\n   * Applies filters to the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.applyFilters = function () {\n    var _this = this; // we create a separate filter for each sprite as otherwise it would be impossible to animate filter.\n    // svg doesn't support multiple filters applied to one element, so we put all the primitives to one filterElement of a sprite.\n\n\n    if (this._filters && this._filters.length > 0) {\n      var width_1 = 100;\n      var height_1 = 100;\n\n      if (!this.filterElement) {\n        this.filterElement = this.paper.addGroup(\"filter\");\n\n        this._disposers.push(this.filterElement);\n      } else {\n        this.filterElement.removeChildNodes();\n      }\n\n      this.paper.appendDef(this.filterElement);\n      var id = \"filter-\" + this.uid;\n      this.filterElement.attr({\n        \"id\": id\n      });\n      $iter.each(this.filters.iterator(), function (filter) {\n        filter.sprite = _this;\n        filter.paper = _this.paper;\n        filter.appendPrimitives(_this.filterElement);\n\n        if (filter.width > width_1) {\n          width_1 = filter.width;\n        }\n\n        if (filter.height > height_1) {\n          height_1 = filter.height;\n        }\n\n        filter.scale = _this.globalScale;\n      });\n      var w = width_1 + \"%\";\n      var h = height_1 + \"%\";\n      /* temporarily removed as it is breaking tooltips on Safari @todo come back to this\r\n      if (this._measuredHeight <= 1) {\r\n          h = height + \"\";\r\n      }\r\n        if (this._measuredWidth <= 1) {\r\n          h = width + \"\";\r\n      }*/\n\n      this.filterElement.attr({\n        \"width\": w,\n        \"height\": h,\n        \"x\": -(width_1 - 100) / 2 + \"%\",\n        \"y\": -(height_1 - 100) / 2 + \"%\"\n      });\n      this.group.attr({\n        \"filter\": \"url(\\\"\" + $utils.getBaseURI() + id + \"\\\")\"\n      });\n    } else if (this.filterElement) {\n      this.group.removeAttr(\"filter\");\n      this.filterElement.removeChildNodes();\n    }\n  };\n  /**\r\n   * [removeClipPath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n\n\n  Sprite.prototype.removeClipPath = function () {\n    if (this._clipPath) {\n      //this._clipPath.dispose();\n      this.removeDispose(this._clipPath);\n      this._clipPath = undefined;\n    }\n  };\n  /**\r\n   * [setElement description]\r\n   *\r\n   * @ignore\r\n   * @todo Description\r\n   * @param element [description]\r\n   */\n\n\n  Sprite.prototype.setElement = function (element) {\n    this.element = element;\n    this.setSVGAttributes();\n    this.applyAccessibility();\n  };\n\n  Object.defineProperty(Sprite.prototype, \"element\", {\n    /**\r\n     * @return Element\r\n     */\n    get: function get() {\n      return this._element;\n    },\n\n    /**\r\n     * The main element for this Sprite, usually an SVG `<g>`.\r\n     *\r\n     * All other sub-elements are created in it.\r\n     *\r\n     * @param element  Element\r\n     */\n    set: function set(element) {\n      // Destroy previous element if there was one before\n      this.removeElement(); // Set new element\n\n      this._element = element; // Add element to group\n      // Since we are adding Element to group, which is already in the\n      // `.disposers` it will be removed automatically when Sprite is disposed\n      // of\n\n      this.group.add(element);\n\n      if (element.node instanceof SVGPathElement) {\n        this._isPath = true;\n      } // This is needed if someone is setting element not in draw method but\n      // from outside\n\n\n      if (!this.invalid) {\n        this.validate();\n      }\n\n      if (options.autoSetClassName) {\n        this.setClassName();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"svgContainer\", {\n    /**\r\n     * HTML container (`<div>`) which is used to place chart's `<svg>` element\r\n     * in.\r\n     *\r\n     * @return Container for chart elements\r\n     */\n    get: function get() {\n      if (this._svgContainer) {\n        return this._svgContainer;\n      } else if (this.parent) {\n        return this.parent.svgContainer;\n      }\n    },\n\n    /**\r\n     * Sets HTML container to add SVG and other chart elements to.\r\n     *\r\n     * @param svgContainer Container for chart elements\r\n     */\n    set: function set(svgContainer) {\n      this._svgContainer = svgContainer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Measures main element.\r\n   *\r\n   * Saves measurements into private `_bbox` property.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Sprite.prototype.measureElement = function () {\n    if (this.element) {\n      if (this.definedBBox) {\n        this._bbox = this.definedBBox;\n      } else {\n        var svgBBox = this.element.getBBox();\n        this._bbox = {\n          x: svgBBox.x,\n          y: svgBBox.y,\n          width: svgBBox.width,\n          height: svgBBox.height\n        };\n      }\n    }\n  };\n  /**\r\n   * Positions element according its center settings.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.updateCenter = function () {\n    if (this.element) {\n      var prevElementTransform = this.element.transformString;\n      var bbox = this.bbox;\n      var ex = 0;\n      var ey = 0;\n      var elementX = bbox.x;\n      var elementY = bbox.y;\n      var elementWidth = bbox.width;\n      var elementHeigth = bbox.height;\n      var pixelPaddingLeft = this.pixelPaddingLeft;\n      var pixelPaddingRight = this.pixelPaddingRight;\n      var pixelPaddingTop = this.pixelPaddingTop;\n      var pixelPaddingBottom = this.pixelPaddingBottom; // add padding to the measured size\n\n      var measuredWidth = $math.max(elementWidth + pixelPaddingLeft + pixelPaddingRight, this.pixelWidth);\n      var measuredHeight = $math.max(elementHeigth + pixelPaddingTop + pixelPaddingBottom, this.pixelHeight); // extremes\n\n      var left = bbox.x;\n      var right = bbox.x + measuredWidth;\n      var top_1 = bbox.y;\n      var bottom = bbox.y + measuredHeight;\n      var horizontalCenter = this.horizontalCenter;\n      var verticalCenter = this.verticalCenter;\n\n      switch (horizontalCenter) {\n        case \"none\":\n          ex = elementX + pixelPaddingLeft;\n          break;\n\n        case \"left\":\n          ex = pixelPaddingLeft;\n          break;\n\n        case \"middle\":\n          ex = pixelPaddingLeft - (elementWidth + pixelPaddingRight + pixelPaddingLeft) / 2;\n          break;\n\n        case \"right\":\n          ex = -pixelPaddingRight - elementWidth;\n          break;\n      }\n\n      switch (verticalCenter) {\n        case \"none\":\n          ey = elementY + pixelPaddingTop;\n          break;\n\n        case \"top\":\n          ey = pixelPaddingTop;\n          break;\n\n        case \"middle\":\n          ey = pixelPaddingTop - (elementHeigth + pixelPaddingBottom + pixelPaddingTop) / 2;\n          break;\n\n        case \"bottom\":\n          ey = -pixelPaddingBottom - elementHeigth;\n          break;\n      }\n\n      this._measuredHeight = measuredHeight;\n      this._measuredWidth = measuredWidth;\n      var x = $math.round(ex - elementX, this._positionPrecision, true);\n      var y = $math.round(ey - elementY, this._positionPrecision, true);\n      this.ex = x - pixelPaddingLeft;\n      this.ey = y - pixelPaddingTop;\n      this.maxLeft = left + x - pixelPaddingLeft;\n      this.maxRight = right + x - pixelPaddingLeft;\n      this.maxTop = top_1 + y - pixelPaddingTop;\n      this.maxBottom = bottom + y - pixelPaddingTop;\n\n      if (this.pixelPerfect) {\n        x -= 0.5;\n        y -= 0.5;\n      }\n\n      this.element.moveTo({\n        x: x,\n        y: y\n      });\n\n      if (prevElementTransform != this.element.transformString) {\n        this.dispatchImmediately(\"transformed\");\n      }\n    }\n  };\n  /**\r\n   * Measures the whole element.\r\n   *\r\n   * Returns `true` if the size has changed from the last measurement.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Did the size changed from the last measurement?\r\n   */\n\n\n  Sprite.prototype.measure = function () {\n    this.updateCenter();\n    var measuredWidth = this._measuredWidth;\n    var measuredHeight = this._measuredHeight; // extremes\n\n    var left = this.maxLeft;\n    var right = this.maxRight;\n    var top = this.maxTop;\n    var bottom = this.maxBottom; // non-parent wise size\n\n    this._measuredWidthSelf = measuredWidth;\n    this._measuredHeightSelf = measuredHeight;\n    var positionPrecision = this._positionPrecision;\n    this.maxLeftSelf = this.maxLeft;\n    this.maxRightSelf = this.maxRight;\n    this.maxTopSelf = this.maxTop;\n    this.maxBottomSelf = this.maxBottom; // if a sprite is rotated or scaled, calculate measured size after transformations\n\n    if (this.rotation !== 0 || this.scale !== 1) {\n      // not good to handleGlobalScale here.\n      if (this.nonScalingStroke) {\n        this.strokeWidth = this.strokeWidth;\n      }\n\n      var svg = this.paper.svg;\n      var matrix = svg.createSVGMatrix();\n      var rotation = this.rotation;\n      matrix.a = $math.cos(rotation) * this.scale;\n      matrix.c = -$math.sin(rotation) * this.scale;\n      matrix.e = 0;\n      matrix.b = $math.sin(rotation) * this.scale;\n      matrix.d = $math.cos(rotation) * this.scale;\n      matrix.f = 0;\n      var p1 = svg.createSVGPoint();\n      p1.x = left;\n      p1.y = top;\n      var p2 = svg.createSVGPoint();\n      p2.x = right;\n      p2.y = top;\n      var p3 = svg.createSVGPoint();\n      p3.x = right;\n      p3.y = bottom;\n      var p4 = svg.createSVGPoint();\n      p4.x = left;\n      p4.y = bottom;\n      var pt1 = p1.matrixTransform(matrix);\n      var pt2 = p2.matrixTransform(matrix);\n      var pt3 = p3.matrixTransform(matrix);\n      var pt4 = p4.matrixTransform(matrix);\n      left = Math.min(pt1.x, pt2.x, pt3.x, pt4.x);\n      right = Math.max(pt1.x, pt2.x, pt3.x, pt4.x);\n      top = Math.min(pt1.y, pt2.y, pt3.y, pt4.y);\n      bottom = Math.max(pt1.y, pt2.y, pt3.y, pt4.y);\n      measuredWidth = right - left;\n      measuredHeight = bottom - top;\n      this.maxLeft = $math.round(left, positionPrecision, true);\n      this.maxRight = $math.round(right, positionPrecision, true);\n      this.maxTop = $math.round(top, positionPrecision, true);\n      this.maxBottom = $math.round(bottom, positionPrecision, true);\n    }\n\n    this._measuredWidth = $math.round(measuredWidth, positionPrecision, true);\n    this._measuredHeight = $math.round(measuredHeight, positionPrecision, true); // dispatch event\n\n    if (this._measuredWidth != this._prevMeasuredWidth || this._measuredHeight != this._prevMeasuredHeight) {\n      this._prevMeasuredHeight = this._measuredHeight;\n      this._prevMeasuredWidth = this._measuredWidth; // TODO clear existing sizechanged dispatches ?\n\n      this.dispatch(\"sizechanged\");\n\n      if ((this.isHover || this.showTooltipOn == \"hit\" || this.showTooltipOn == \"always\") && this.tooltip && this.tooltip.visible && ($type.hasValue(this.tooltipText) || $type.hasValue(this.tooltipHTML))) {\n        this.updateTooltipPosition();\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n  /**\r\n   * Insert this element before sibling element.\r\n   *\r\n   * @param sprite  Target element\r\n   * @return This element\r\n   */\n\n\n  Sprite.prototype.insertBefore = function (sprite) {\n    var parent = this.parent;\n\n    if (parent) {\n      var index = parent.children.indexOf(sprite);\n\n      if (index !== -1) {\n        parent.children.moveValue(this, index);\n        parent.sortChildren();\n      }\n    }\n\n    return this;\n  };\n  /**\r\n   * Insert this element after sibling element.\r\n   *\r\n   * @param sprite  Target element\r\n   * @return This element\r\n   */\n\n\n  Sprite.prototype.insertAfter = function (sprite) {\n    var parent = this.parent;\n\n    if (parent) {\n      var index = parent.children.indexOf(sprite);\n\n      if (index !== -1) {\n        parent.children.moveValue(this, index + 1);\n        parent.sortChildren();\n      }\n    }\n\n    return this;\n  };\n  /**\r\n   * Removes the main SVG element.\r\n   *\r\n   * This does not destroy the whole Sprite element. To do that use\r\n   * `dispose()` instead.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.removeElement = function () {\n    // remove visual element\n    if (this._element) {\n      this.removeDispose(this._element);\n      this._element = undefined;\n    }\n  };\n  /**\r\n   * Returns relative (percent) value of the X coordindate within this element.\r\n   *\r\n   * A relative value is a hundredth of a percent. So 100% would result in a 1\r\n   * as relative value.\r\n   *\r\n   * @param value  Absolute or relative X coordinate\r\n   * @return Relative value\r\n   */\n\n\n  Sprite.prototype.getRelativeX = function (value) {\n    if (value instanceof Percent) {\n      return value.value;\n    } else if (this.parent) {\n      return value / this.parent.innerWidth;\n    }\n\n    return 0;\n  };\n  /**\r\n   * Returns relative (percent) value of the Y coordindate within this element.\r\n   *\r\n   * A relative value is a hundredth of a percent. So 100% would result in a 1\r\n   * as relative value.\r\n   *\r\n   * @param value  Absolute or relative Y coordinate\r\n   * @return Relative value\r\n   */\n\n\n  Sprite.prototype.getRelativeY = function (value) {\n    if (value instanceof Percent) {\n      return value.value;\n    } else if (this.parent) {\n      return value / this.parent.innerHeight;\n    }\n\n    return 0;\n  };\n  /**\r\n   * Returns an X coordinate in pixel within the element.\r\n   *\r\n   * If number is passed in as parameter, the same number will be returned\r\n   * back.\r\n   *\r\n   * If [[Percent]] is passed in, it will be recalculated to pixels.\r\n   *\r\n   * @param value  Absolute or relative X coordinate\r\n   * @return X coordinate in pixels\r\n   */\n\n\n  Sprite.prototype.getPixelX = function (value) {\n    // we don't use $utils.valueToRelative as this would mean that we should access parent.innerWidth\n    // all the time and this would result chain of the same actions and will slow down the system a lot\n    var pixel = 0;\n\n    if ($type.isNumber(value)) {\n      pixel = value;\n    } else if (value instanceof Percent) {\n      var relative = value.value;\n\n      if (this.parent) {\n        pixel = $math.round(this.parent.innerWidth * relative, this._positionPrecision, true);\n      }\n    }\n\n    return pixel;\n  };\n  /**\r\n   * Returns an Y coordinate in pixel within the element.\r\n   *\r\n   * If number is passed in as parameter, the same number will be returned\r\n   * back.\r\n   *\r\n   * If [[Percent]] is passed in, it will be recalculated to pixels.\r\n   *\r\n   * @param value  Absolute or relative Y coordinate\r\n   * @return Y coordinate in pixels\r\n   */\n\n\n  Sprite.prototype.getPixelY = function (value) {\n    // we don't use $utils.valueToRelative as this would mean that we should access parent.innerWidth\n    // all the time and this would result chain of the same actions and will slow down the system a lot\n    var pixel = 0;\n\n    if ($type.isNumber(value)) {\n      pixel = value;\n    } else if (value instanceof Percent) {\n      var relative = value.value;\n\n      if (this.parent) {\n        pixel = $math.round(this.parent.innerHeight * relative, this._positionPrecision, true);\n      }\n    }\n\n    return pixel;\n  };\n  /**\r\n   * Moves the element to a specified coordinates.\r\n   *\r\n   * Using this method is preferred method of moving element, as it saves some\r\n   * CPU processing power over setting `x` and `y` properties separately.\r\n   *\r\n   * The method respects element's center settings. The element will be\r\n   * positioned so that `point` coordinates come in whatever \"center\" of the\r\n   * element is, as set in `horizontalCenter` and `verticalCenter`.\r\n   *\r\n   * Besides moving the element, you can also at the same time scale and\r\n   * rotate the element.\r\n   *\r\n   * @param point     New coordinates\r\n   * @param rotation  New rotation\r\n   * @param scale     New Scale\r\n   */\n\n\n  Sprite.prototype.moveTo = function (point, rotation, scale, isDragged) {\n    if (this.isDragged && !isDragged) {\n      return;\n    }\n\n    if (point) {\n      if ($type.isNumber(point.x)) {\n        this.setPropertyValue(\"x\", $math.round(point.x, this._positionPrecision, true));\n      }\n\n      if ($type.isNumber(point.y)) {\n        this.setPropertyValue(\"y\", $math.round(point.y, this._positionPrecision, true));\n      }\n    }\n\n    if ($type.isNumber(rotation)) {\n      this.rotation = rotation;\n    }\n\n    if ($type.isNumber(scale)) {\n      this.scale = scale;\n    } // must leave this\n\n\n    this.invalidatePosition();\n  };\n\n  Object.defineProperty(Sprite.prototype, \"mask\", {\n    /**\r\n     * Returns [[Sprite]] element currently used as mask for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return A [[Sprite]] to use as mask\r\n     */\n    get: function get() {\n      if (!this._adapterO) {\n        return this._mask.get();\n      } else {\n        return this._adapterO.apply(\"mask\", this._mask.get());\n      }\n    },\n\n    /**\r\n     * Sets another [[Sprite]] element as this elements mask.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param mask A [[Sprite]] to use as mask\r\n     */\n    set: function set(mask) {\n      var _this = this;\n\n      if (this._mask.get() !== mask) {\n        // this is good\n        if (mask) {\n          this.createClipPath();\n\n          if (!(mask instanceof Container)) {\n            mask.isMeasured = false;\n\n            if (mask.element) {\n              this._clipElement = mask.element;\n            }\n          } else {\n            this._clipElement = this.paper.add(\"rect\");\n          }\n\n          if (this._clipElement) {\n            this._clipPath.add(this._clipElement);\n          }\n\n          this._mask.set(mask, new MultiDisposer([//mask.addEventListener(SpriteEvent.TRANSFORMED, this.applyMask, false, this);\n          mask.events.on(\"maxsizechanged\", function () {\n            if (_this.inited) {\n              _this.applyMask();\n            }\n          }, undefined, false), mask.events.on(\"validated\", this.applyMask, this, false), mask.events.on(\"positionchanged\", this.applyMask, this, false)]));\n\n          this.applyMask();\n        } else {\n          this._mask.reset();\n\n          this.group.removeAttr(\"clip-path\");\n          this.removeClipPath();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"maskRectangle\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Mask Rectangle\r\n     */\n    get: function get() {\n      return this._maskRectangle;\n    },\n    // you can set IRectangle as a mask instead o a sprite. Note, the changes of the object won't be monitored\n\n    /**\r\n     * Instead of creating a [[Sprite]] for mask, you can just use a\r\n     * [[Rectangle]] by setting this accessor.\r\n     *\r\n     * Please note that the element will not monitor any changes to the mask\r\n     * rectangle.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param rect Mask Rectangle\r\n     */\n    set: function set(rect) {\n      if (rect) {\n        this.createClipPath();\n\n        if (!this._clipElement) {\n          this._clipElement = this.paper.add(\"rect\");\n\n          this._clipPath.add(this._clipElement);\n        }\n\n        this._clipElement.attr({\n          \"width\": rect.width,\n          \"height\": rect.height\n        });\n      } else {\n        this.removeClipPath();\n        this._clipElement = undefined;\n      }\n\n      this._maskRectangle = rect;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"isMeasured\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Was element already measured?\r\n     */\n    get: function get() {\n      return this._isMeasured;\n    },\n\n    /**\r\n     * Indicates if this element was already measured.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Was element already measured?\r\n     */\n    set: function set(value) {\n      value = $type.toBoolean(value);\n\n      if (!value) {\n        this._measuredWidth = 0;\n        this._measuredHeight = 0; //this._pixelHeight = 0;\n        //this._pixelWidth = 0;\n      }\n\n      if (this._isMeasured != value) {\n        this._isMeasured = value;\n        this.invalidatePosition();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Checks if the this element has any of its parts overlapping with another\r\n   * element.\r\n   *\r\n   * @todo Description (review)\r\n   * @param sprite  Second element to test again\r\n   * @return Overlapping?\r\n   */\n\n  Sprite.prototype.hitTest = function (sprite) {\n    // validate, otherwise we will not know measuredWidth and measuredHeight\n    if (this.invalid) {\n      this.validate();\n    }\n\n    if (sprite.invalid) {\n      sprite.validate();\n    }\n\n    var ax1 = this.pixelX;\n    var ay1 = this.pixelY;\n    var ax2 = ax1 + this.measuredWidth;\n    var ay2 = ay1 + this.measuredHeight;\n    var bx1 = sprite.pixelX;\n    var by1 = sprite.pixelY;\n    var bx2 = bx1 + sprite.measuredWidth;\n    var by2 = by1 + sprite.measuredHeight;\n    return !(bx1 > ax2 || bx2 < ax1 || by1 > ay2 || by2 < ay1);\n  };\n\n  Object.defineProperty(Sprite.prototype, \"inited\", {\n    /**\r\n     * ==========================================================================\r\n     * STATE-RELATED\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Returns `true` if Sprite has already finished initializing.\r\n     *\r\n     * @return Initialized?\r\n     */\n    get: function get() {\n      return this._inited;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns `true` if Sprite has already finished initializing and is ready.\r\n   *\r\n   * If this object is a [[Container]] it will wait for all of its children\r\n   * are ready before becoming ready itself and firing a `\"ready\"` event.\r\n   *\r\n   * @return is ready?\r\n   */\n\n  Sprite.prototype.isReady = function () {\n    return this._ready;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"states\", {\n    /**\r\n     * Returns a collection of element's available [[SpriteState]] entries.\r\n     *\r\n     * @see {@link SpriteState}\r\n     * @return States\r\n     */\n    get: function get() {\n      if (!this._states) {\n        var state = new SpriteState(); // works\n\n        this._states = new DictionaryTemplate(state); // TODO what about removeKey ?\n\n        this._disposers.push(this._states.events.on(\"insertKey\", this.processState, this, false));\n\n        this._disposers.push(this._states.events.on(\"setKey\", this.processState, this, false));\n\n        this._disposers.push(new DictionaryDisposer(this._states));\n\n        this._disposers.push(state);\n      }\n\n      return this._states;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"hiddenState\", {\n    /**\r\n     * Returns a [[SpriteState]] object for \"hidden\" state.\r\n     *\r\n     * This is a shortcut to `this.states.getKey(\"hidden\")`.\r\n     *\r\n     * @return Hidden state\r\n     */\n    get: function get() {\n      if (!this.states.getKey(\"hidden\")) {\n        var hiddenState = this.states.create(\"hidden\");\n        hiddenState.properties.opacity = 0;\n        hiddenState.properties.visible = false;\n      }\n\n      return this.states.getKey(\"hidden\");\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"defaultState\", {\n    /**\r\n     * Returns a [[SpriteState]] object for \"default\" state.\r\n     *\r\n     * This is a shortcut to `this.states.getKey(\"default\")`.\r\n     *\r\n     * @return Hidden state\r\n     */\n    get: function get() {\n      if (!this.states.getKey(\"default\")) {\n        var defaultState = this.states.create(\"default\");\n        defaultState.properties.opacity = 1;\n      }\n\n      return this.states.getKey(\"default\");\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Checks if some key states are defined and updates Sprite properties\r\n   * accordingly.\r\n   *\r\n   * For example if there's a state \"down\" defined for Sprite, we automatically\r\n   * make it \"clickable\".\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event An event which caused state list update\r\n   */\n\n  Sprite.prototype.processState = function (event) {\n    var state = event.newValue;\n    state.sprite = this;\n    state.name = event.key;\n\n    if (this.states.hasKey(\"hover\") || this.showTooltipOn == \"hover\" && ($type.hasValue(this.tooltipHTML) || $type.hasValue(this.tooltipText))) {\n      this.hoverable = true;\n    }\n\n    if (this.states.hasKey(\"down\") || this.showTooltipOn == \"hover\" && ($type.hasValue(this.tooltipHTML) || $type.hasValue(this.tooltipText))) {\n      this.clickable = true;\n    }\n\n    if (this.states.hasKey(\"focus\")) {\n      this.focusable = true;\n    } // Propagate the new state to clones\n\n\n    if (this.applyOnClones) {\n      var clones = this.clones.values;\n      var length_1 = clones.length;\n\n      for (var i = 0; i < length_1; ++i) {\n        var clone = clones[i];\n\n        if (!clone.isDisposed()) {\n          clone.states.setKey(state.name, state);\n        }\n      }\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"animations\", {\n    /**\r\n     * Returns a list elements's animations currently being played.\r\n     *\r\n     * If the list has not been initialized it is created.\r\n     *\r\n     * @return List of animations\r\n     */\n    get: function get() {\n      if (!this._animations) {\n        this._animations = [];\n\n        this._disposers.push(new AnimationDisposer(this._animations));\n      }\n\n      return this._animations;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts element's local coordinates to the coordinates within the main\r\n   * chart container.\r\n   *\r\n   * @param point  Local point\r\n   * @return Global point\r\n   */\n\n  Sprite.prototype.getSvgPoint = function (point) {\n    try {\n      // Calculate SVG point\n      var bbox = this.htmlContainer.getBoundingClientRect();\n      return {\n        \"x\": point.x - bbox.left,\n        \"y\": point.y - bbox.top\n      };\n    } catch (e) {\n      return point;\n    }\n  };\n  /**\r\n   * Creates and starts an [[Animation]] with given `animationOptions`.\r\n   *\r\n   * @see {@link Animation} for additional information about available options\r\n   * @param animationOptions  Animation options\r\n   * @param duration          Duration in milliseconds\r\n   * @param easing            Easing function\r\n   * @return Animation instance\r\n   */\n\n\n  Sprite.prototype.animate = function (animationOptions, duration, easing) {\n    return new Animation(this, animationOptions, duration, easing).start();\n  };\n  /**\r\n   * Applies a [[SpriteState]] on this element.\r\n   *\r\n   * The first parameter can either be a name state or a [[SpriteState]]\r\n   * instance.\r\n   *\r\n   * When run, this method will apply SVG properties defined in a\r\n   * [[SpriteState]], but only those that are relevant to this particular\r\n   * element, i.e. are in the `properties` array.\r\n   *\r\n   * @see {@link SpriteState}\r\n   * @param value               A state - name key or instance\r\n   * @param transitionDuration  Duration of the transition between current and new state\r\n   * @param easing              An easing function\r\n   */\n\n\n  Sprite.prototype.setState = function (value, transitionDuration, easing) {\n    var state;\n\n    if (value instanceof SpriteState) {\n      this.states.setKey(value.name, value);\n      state = value;\n    } else {\n      state = this.states.getKey(value);\n\n      if (!state) {\n        return;\n      }\n    } // stop previous transition\n    // not good - foe expample, we are animating to some \"active\" state and in them middle \"hover\" state happens. then \"active\" stat won't be applied\n    //if (this._transition) {\n    //this._transition.stop();\n    //}\n\n\n    if (state.name == \"hover\") {\n      if (this.isHidden) {\n        return;\n      }\n\n      this.isHover = true;\n    }\n\n    if (state.name == \"hidden\") {\n      this.isHiding = true;\n    } else {\n      if (!this.visible) {\n        this.setVisibility(state.properties.visible || this.defaultState.properties.visible);\n      }\n    }\n\n    if (state.name == \"active\") {\n      this.isActive = true;\n    } // we do not set isActive = false here if it's not active, but container does that if setStateOnChildren = true\n\n\n    if (!$type.isNumber(transitionDuration)) {\n      transitionDuration = state.transitionDuration;\n    }\n\n    if (!$type.hasValue(easing)) {\n      easing = state.transitionEasing;\n    }\n\n    return this.transitTo(state, transitionDuration, easing);\n  };\n  /**\r\n   * Applies proper state based on the condition of the element. A condition is\r\n   * deducted in this order:\r\n   * * \"hover\" if Sprite has currently any pointers over it\r\n   * * \"down\" if Sprite has any pointers (touch or mouse) currently pressed over it\r\n   * * \"focus\" if Sprite has currently got focus (accessibility)\r\n   * * \"hidden\" if Sprite is currently hidden\r\n   *\r\n   * Returns an [[Animation]] object, which is handling gradual transition from\r\n   * current values of properties, to the new target state(s).\r\n   *\r\n   * @param duration  Duration for the animation (ms)\r\n   * @return [[Animation]] object which is handling the transition\r\n   */\n\n\n  Sprite.prototype.applyCurrentState = function (duration) {\n    //if (!this.isHidden) { // this was done for hover state not to take effect if \"hidden\" is actually visible, need to think about it.\n    var animation = this.setState(this.defaultState, duration);\n\n    if (this.isHover) {\n      animation = this.setState(\"hover\", duration);\n    }\n\n    if (this.isDown && this.interactions.downPointers.length) {\n      animation = this.setState(\"down\", duration);\n    }\n\n    this.isFocused = this.isFocused;\n\n    if (this.isActive) {\n      animation = this.setState(\"active\", duration);\n\n      if (this.isHover && this.states.hasKey(\"hoverActive\")) {\n        animation = this.setState(\"hoverActive\", duration);\n      }\n    }\n\n    return animation; //}\n  };\n  /**\r\n   * Starts an [[Animation]] of the properties to specific values as they are\r\n   * set in `state`.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param state     Target State\r\n   * @param duration  Duration in milliseconds\r\n   * @param easing    Easing function\r\n   * @return Transition Animation\r\n   */\n\n\n  Sprite.prototype.transitTo = function (state, duration, easing) {\n    var _this = this; // Init\n\n\n    var options = [],\n        propValues = state.allValues,\n        transition; // todo: do this for numeric/color properties only?\n    // @todo use state.getPropertyValue instead\n\n    $object.each(propValues, function (propertyName, finalValue) {\n      var currentValue = _this[propertyName]; // save current value to default state. this solves a big problem where values must be set both on sprite and default state\n\n      if (finalValue != currentValue && _this.defaultState.properties[propertyName] == undefined) {\n        _this.defaultState.properties[propertyName] = currentValue;\n      } //if (finalValue != currentValue && $type.hasValue(finalValue)) {\n\n\n      if (finalValue != \"__unset\") {\n        var option = {\n          from: currentValue,\n          to: finalValue,\n          property: propertyName\n        };\n        options.push(option);\n      }\n    });\n\n    if (options.length > 0) {\n      transition = this.animate(options, duration, easing);\n\n      if (transition && !transition.isFinished()) {\n        // TODO should this use events.once ?\n        // TODO push onto _disposers array ?\n        this._disposers.push(transition.events.on(\"animationended\", function () {\n          _this.dispatchImmediately(\"transitionended\");\n        }));\n      } else {\n        this.dispatchImmediately(\"transitionended\");\n      }\n    } // apply filters if set\n\n\n    if (state.filters.length > 0) {\n      var newFilters_1 = []; // check for the same filters\n\n      $iter.each(state.filters.iterator(), function (stateFilter) {\n        var newFilter = stateFilter.clone();\n        newFilters_1.push(newFilter);\n        var animationOptions = [];\n        $iter.each(_this.filters.iterator(), function (currentFilter) {\n          // if we have the same filters\n          if (currentFilter.className == newFilter.className) {\n            if (!$iter.contains(_this.defaultState.filters.iterator(), function (x) {\n              return x.className === newFilter.className;\n            })) {\n              _this.defaultState.filters.push(currentFilter);\n            }\n\n            $object.each(newFilter.properties, function (propertyName, newValue) {\n              var currentValue = currentFilter.properties[propertyName]; // if values are not the same, push to animation options array\n\n              if (currentValue != newValue) {\n                animationOptions.push({\n                  property: propertyName,\n                  from: currentValue,\n                  to: newValue\n                });\n              }\n            });\n          }\n        }); // animate to new value\n\n        newFilter.animate(animationOptions, duration, easing);\n      });\n      this.filters.clear();\n      this.filters.pushAll(newFilters_1);\n    }\n\n    return transition;\n  };\n  /**\r\n   * Returns `true` if Sprite is currently transiting from one state/value to\r\n   * another.\r\n   *\r\n   * @return Is in transition?\r\n   */\n\n\n  Sprite.prototype.isInTransition = function () {\n    return this.animations.length > 0;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"isHover\", {\n    /**\r\n     * Returns indicator if this element has a mouse pointer currently hovering\r\n     * over it, or if it has any touch pointers pressed on it.\r\n     *\r\n     * @return Is hovered?\r\n     */\n    get: function get() {\n      if (this.isInteractive()) {\n        return this.interactions.isHover;\n      }\n\n      return false;\n    },\n\n    /**\r\n     * Indicates if this element has a mouse pointer currently hovering\r\n     * over it, or if it has any touch pointers pressed on it.\r\n     *\r\n     * @param value Is hovered?\r\n     */\n    set: function set(value) {\n      value = $type.toBoolean(value);\n\n      if (value !== this.isHover) {\n        if (this.isInteractive()) {\n          this.interactions.isHover = value;\n\n          if (value) {\n            this.handleOver();\n          } else {\n            this.interactions.isRealHover = false;\n            this.handleOut();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"isDragged\", {\n    /**\r\n     * Returns indicator if this element is being dragged at the moment.\r\n     *\r\n     * @return Is dragged?\r\n     */\n    get: function get() {\n      return this._isDragged;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"isResized\", {\n    /**\r\n     * Returns indicator if this element is being resized at the moment.\r\n     *\r\n     * @return Is resized?\r\n     */\n    get: function get() {\n      return this._isResized;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"isDown\", {\n    /**\r\n     * @return Is down?\r\n     */\n    get: function get() {\n      if (this.isInteractive()) {\n        return this.interactions.isDown;\n      }\n\n      return false;\n    },\n\n    /**\r\n     * Indicates if this element has any pointers (mouse or touch) pressing down\r\n     * on it.\r\n     *\r\n     * @param value Is down?\r\n     */\n    set: function set(value) {\n      value = $type.toBoolean(value);\n\n      if (this.isInteractive() && this.isDown != value) {\n        this.interactions.isDown = value;\n\n        if (value) {\n          this.handleDown();\n        } else {\n          this.handleUp();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"isFocused\", {\n    /**\r\n     * @return Is focused?\r\n     */\n    get: function get() {\n      if (this.isInteractive()) {\n        return this.interactions.isFocused;\n      }\n\n      return false;\n    },\n\n    /**\r\n     * Indicates if this element is focused (possibly by tab navigation).\r\n     *\r\n     * @param value Is focused?\r\n     */\n    set: function set(value) {\n      value = $type.toBoolean(value);\n\n      if (this.focusable && this.isFocused != value) {\n        if (this.isInteractive()) {\n          this.interactions.isFocused = value;\n\n          if (value === true) {\n            this.handleFocus();\n          } else {\n            this.handleBlur();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"isActive\", {\n    /**\r\n     * @return Is active?\r\n     */\n    get: function get() {\n      return this._isActive;\n    },\n\n    /**\r\n     * Indicates if this element is currently active (toggled on) or not\r\n     * (toggled off).\r\n     *\r\n     * @param value Is active?\r\n     */\n    set: function set(value) {\n      this.setActive(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Sprite.prototype.setActive = function (value) {\n    value = $type.toBoolean(value);\n\n    if (this._isActive !== value) {\n      this._isActive = value;\n\n      if (value && this.states.hasKey(\"active\")) {\n        this.setState(\"active\");\n\n        if (this.isHover && this.states.hasKey(\"hoverActive\")) {\n          this.setState(\"hoverActive\");\n        }\n      } else {\n        this.applyCurrentState();\n      }\n\n      this.dispatchImmediately(\"toggled\");\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"disabled\", {\n    /**\r\n     * @return Disabled?\r\n     */\n    get: function get() {\n      //if(this._internalDisabled){\n      //\treturn true;\n      //}\n      var current = this.getPropertyValue(\"disabled\");\n\n      if ($type.hasValue(current)) {\n        return current;\n      } else {\n        if (this.virtualParent) {\n          return this.virtualParent.disabled;\n        }\n\n        if (this.parent) {\n          return this.parent.disabled;\n        }\n      }\n\n      return false;\n    },\n\n    /**\r\n     * Controls if element is disabled.\r\n     *\r\n     * A disabled element is hidden, and is removed from any processing, layout\r\n     * calculations, and generally treated as if it does not exist.\r\n     *\r\n     * The element itself is not destroyed, though. Setting this back to `false`,\r\n     * will \"resurrect\" the element.\r\n     *\r\n     * @param value  Disabled?\r\n     */\n    set: function set(value) {\n      this.setDisabled(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Sprite.prototype.setDisabled = function (value) {\n    value = $type.toBoolean(value);\n    var current = this.getPropertyValue(\"disabled\");\n\n    if (current != value) {\n      this.setPropertyValue(\"disabled\", value, true);\n\n      if (value) {\n        this.parent = this.parent;\n        this.removeFromInvalids();\n        this.group.attr({\n          \"display\": \"none\"\n        });\n        this.dispatch(\"disabled\");\n      } else {\n        if (this.parent) {\n          var group = this.parent.element;\n\n          if (!group.hasChild(this.group)) {\n            group.add(this.group);\n          }\n        }\n\n        if (this instanceof Container) {\n          this.deepInvalidate();\n\n          if (this._background) {\n            this._background.invalidate();\n          }\n        } else {\n          this.invalidate();\n        }\n\n        if (!this.__disabled) {\n          this.removeSVGAttribute(\"display\");\n        }\n\n        this.dispatch(\"enabled\");\n      }\n\n      this.dispatch(\"transformed\");\n      system.requestFrame();\n      return true;\n    }\n\n    return false;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"__disabled\", {\n    /**\r\n     * @ignore\r\n     * @return Disabled?\r\n     */\n    get: function get() {\n      return this._internalDisabled;\n    },\n\n    /**\r\n     * Internal disable method.\r\n     *\r\n     * Do not use it for disabling elements. Use `disabled` accessor instead.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Disabled?\r\n     */\n    set: function set(value) {\n      if (this._internalDisabled != value) {\n        this._internalDisabled = value;\n        this._updateDisabled = true;\n        this.invalidatePosition(); // better use this instead of invalidate()\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"numberFormatter\", {\n    /**\r\n     * @return A [[NumberFormatter]] instance to be used\r\n     */\n    get: function get() {\n      if (this._numberFormatter) {\n        return this._numberFormatter;\n      } else if (this.virtualParent) {\n        return this.virtualParent.numberFormatter;\n      } else if (this.parent) {\n        return this.parent.numberFormatter;\n      }\n\n      this._numberFormatter = new NumberFormatter();\n      this._numberFormatter.language = this.language;\n      return this.numberFormatter;\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * FORMATTERS AND OTHER EXTERNAL HELPERS\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * A [[NumberFormatter]] instance.\r\n     *\r\n     * This is used to format numbers.\r\n     *\r\n     * ```TypeScript\r\n     * chart.numberFormatter.numberFormat = \"#,###.#####\";\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.numberFormatter.numberFormat = \"#,###.#####\";\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"numberFormatter\": {\r\n     *     \"numberFormat\": \"#,###.#####\"\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * You can set a separate instance of formatter for each\r\n     * individual element. However that would be unnecessary overhead as\r\n     * all elements would automatically inherit formatter from their parents,\r\n     * all the way up to the chart itself.\r\n     *\r\n     *\r\n     * @see {@link NumberFormatter} for more info on formatting numbers\r\n     * @param value  An instance of NumberFormatter\r\n     */\n    set: function set(value) {\n      this._numberFormatter = value;\n      this._numberFormatter.language = this.language;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"dateFormatter\", {\n    /**\r\n     * @return An instance of DateFormatter\r\n     */\n    get: function get() {\n      if (this._dateFormatter) {\n        return this._dateFormatter;\n      } else if (this.virtualParent) {\n        return this.virtualParent.dateFormatter;\n      } else if (this.parent) {\n        return this.parent.dateFormatter;\n      }\n\n      this._dateFormatter = new DateFormatter();\n      this._dateFormatter.language = this.language;\n      return this.dateFormatter;\n    },\n\n    /**\r\n     * A [[DateFormatter]] instance.\r\n     *\r\n     * This is used to format dates, e.g. on a date axes, balloons, etc.\r\n     *\r\n     * ```TypeScript\r\n     * chart.dateFormatter.dateFormat = \"yyyy-MM-dd\";\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.dateFormatter.dateFormat = \"yyyy-MM-dd\";\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"dateFormatter\": {\r\n     *     \"dateFormat\": \"yyyy-MM-dd\"\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * You can set a separate instance of formatter for each\r\n     * individual element. However that would be unnecessary overhead as\r\n     * all elements would automatically inherit formatter from their parents,\r\n     * all the way up to the chart itself.\r\n     *\r\n     * @see {@link DateFormatter} for more info on dates formatting\r\n     * @param value  An instance of DateFormatter\r\n     */\n    set: function set(value) {\n      this._dateFormatter = value;\n      this._dateFormatter.language = this.language;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"durationFormatter\", {\n    /**\r\n     * @return An instance of DurationFormatter\r\n     */\n    get: function get() {\n      if (this._durationFormatter) {\n        return this._durationFormatter;\n      } else if (this.virtualParent) {\n        return this.virtualParent.durationFormatter;\n      } else if (this.parent) {\n        return this.parent.durationFormatter;\n      }\n\n      this._durationFormatter = new DurationFormatter();\n      this._durationFormatter.language = this.language;\n      return this.durationFormatter;\n    },\n\n    /**\r\n     * A [[DurationFormatter]] instance.\r\n     *\r\n     * This is used to format numbers as durations, e.g. on a value axes.\r\n     *\r\n     * You can set a separate instance of formatter for each\r\n     * individual element. However that would be unnecessary overhead as\r\n     * all elements would automatically inherit formatter from their parents,\r\n     * all the way up to the chart itself.\r\n     *\r\n     * @see {@link DurationFormatter} for more info on durations\r\n     * @param value  An instance of DurationFormatter\r\n     */\n    set: function set(value) {\n      this._durationFormatter = value;\n      this._durationFormatter.language = this.language;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"language\", {\n    /**\r\n     * @return An instance of Language\r\n     */\n    get: function get() {\n      var language = this._language.get();\n\n      if (language) {\n        return language;\n      } else if (this.virtualParent) {\n        return this.virtualParent.language;\n      } else if (this.parent) {\n        return this.parent.language;\n      }\n\n      language = new Language();\n      this.language = language;\n      return language;\n    },\n\n    /**\r\n     * A [[Language]] instance to use for translations.\r\n     *\r\n     * Normally it is enough to set language for the top-most element - chart.\r\n     *\r\n     * All other element child elements will automatically re-use that language\r\n     * object.\r\n     *\r\n     * @param value  An instance of Language\r\n     */\n    set: function set(value) {\n      var _this = this;\n\n      if (this._language.get() !== value) {\n        this._language.set(value, value.events.on(\"localechanged\", function (ev) {\n          if (_this._numberFormatter) {\n            _this._numberFormatter.language = _this.language;\n          }\n\n          if (_this._dateFormatter) {\n            _this._dateFormatter.language = _this.language;\n          }\n\n          if (_this._durationFormatter) {\n            _this._durationFormatter.language = _this.language;\n          }\n\n          if (_this._exporting.get()) {\n            var exporting = _this._exporting.get();\n\n            exporting.numberFormatter.language = _this.language;\n            exporting.dateFormatter.language = _this.language;\n            exporting.durationFormatter.language = _this.language;\n            exporting.language = _this.language;\n          }\n\n          if (_this instanceof Container) {\n            _this.deepInvalidate();\n          }\n        }));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * ==========================================================================\r\n   * DATA-RELATED STUFF\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Parses the string for meta tags `{tag}` and replaces them with a real\r\n   * value. Supports straight up tags referring to the field in data, i.e.\r\n   * `{value}` or tags with additional formatting info. E.g.:\r\n   *\r\n   * ```Text\r\n   * {myfield.formatDate(\"yyyy-MM-dd\")}\r\n   * {myfield.formatDate()}\r\n   * {myfield.formatNumber(\"#,####.00\")}\r\n   * {myfield.formatNumber()}\r\n   * {myField.formatDuration(\"mm:ss\")}\r\n   * ```\r\n   *\r\n   * Etc.\r\n   *\r\n   * This method Will automatically detect and use proper formatter for the\r\n   * value.\r\n   *\r\n   * The source value will be looked up in various places: (in order)\r\n   * * Sprite's own `dataItem`\r\n   * * Sprite's properties\r\n   * * Parent's `dataItem`\r\n   * * Parent's properties\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param string            A string to format\r\n   * @param dataItem          DataItem\r\n   * @return Formatted string\r\n   */\n\n  Sprite.prototype.populateString = function (string, dataItem) {\n    if ($type.hasValue(string)) {\n      string = $type.castString(string);\n      string = getTextFormatter().escape(string);\n      var tags = string.match(/\\{([^}]+)\\}/g);\n      var i = void 0;\n\n      if (tags) {\n        for (i = 0; i < tags.length; i++) {\n          var tag = tags[i].replace(/\\{([^}]+)\\}/, \"$1\");\n          var value = this.getTagValue(tag, \"\", dataItem);\n\n          if (!$type.hasValue(value)) {\n            value = \"\";\n          }\n\n          string = string.split(tags[i]).join(value);\n        }\n      }\n\n      string = getTextFormatter().unescape(string);\n    } else {\n      string = \"\";\n    }\n\n    if (!this._adapterO) {\n      return string;\n    } else {\n      return this._adapterO.apply(\"populateString\", string);\n    }\n  };\n  /**\r\n   * Gets the value from data item and formats it according to specified format.\r\n   *\r\n   * If `format` is specified, it will use its contents to choose formatter for\r\n   * the value. Otherwise it will select formatter accordingly to actual value\r\n   * type.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Ability to force certain formatter on known numeric and date values\r\n   * @see {@link NumberFormatter}\r\n   * @see {@link DateFormatter}\r\n   * @see {@link DurationFormatter}\r\n   * @param tagName           Tag name to replace\r\n   * @param format            Format to use\r\n   * @param dataItem          DataItem\r\n   * @return Formatted value\r\n   */\n\n\n  Sprite.prototype.getTagValue = function (tagName, format, dataItem) {\n    var value;\n\n    if (!$type.hasValue(dataItem)) {\n      dataItem = this.dataItem;\n    } // Parse parts\n\n\n    var parts = [];\n    var reg = /([^.]+)\\(([^)]*)\\)|([^.]+)/g;\n    ;\n    var matches;\n\n    while (true) {\n      matches = reg.exec(tagName);\n\n      if (matches === null) {\n        break;\n      }\n\n      if (matches[3]) {\n        // Simple property\n        parts.push({\n          prop: matches[3]\n        });\n      } else {\n        // Method\n        // Parse parameters\n        var params = [];\n\n        if ($utils.trim(matches[2]) != \"\") {\n          var reg2 = /'([^']*)'|\"([^\"]*)\"|([0-9\\-]+)/g;\n          var matches2 = void 0;\n\n          while (true) {\n            matches2 = reg2.exec(matches[2]);\n\n            if (matches2 === null) {\n              break;\n            }\n\n            params.push(matches2[1] || matches2[2] || matches2[3]);\n          }\n        }\n\n        parts.push({\n          method: matches[1],\n          params: params\n        });\n      }\n    } // Check if we can retrieve the value from data item\n\n\n    if (dataItem) {\n      // Check values\n      value = this.getTagValueFromObject(parts, dataItem.values); // Check properties\n\n      if (!$type.hasValue(value) || $type.isObject(value)) {\n        // isObject helps to solve problem with date axis, as for example dateX will get dateX from values object and wont't get to the dateX date.\n        value = this.getTagValueFromObject(parts, dataItem);\n      } // Check data context\n\n\n      var dataContext = dataItem.dataContext;\n\n      if (!$type.hasValue(value) && dataContext) {\n        value = this.getTagValueFromObject(parts, dataItem.dataContext); // scond data context level sometimes exist (tree map)\n\n        if (!$type.hasValue(value) && dataContext.dataContext) {\n          value = this.getTagValueFromObject(parts, dataContext.dataContext);\n        }\n      } // Check component's data item\n\n\n      if (!$type.hasValue(value) && dataItem.component && dataItem.component.dataItem !== dataItem) {\n        value = dataItem.component.getTagValue(tagName, format);\n      }\n    } // Check sprite's properties\n\n\n    if (!$type.hasValue(value)) {\n      value = this.getTagValueFromObject(parts, this.populateStringFrom || this);\n    } // Finally, check the parent\n\n\n    if (!$type.hasValue(value) && this.parent) {\n      value = this.parent.getTagValue(tagName, format);\n    }\n\n    return value;\n  };\n  /**\r\n   * Tries to retrieve values from properties of any object, then applies\r\n   * proper formatting to it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (improve)\r\n   * @param parts   Properties ant methods to access\r\n   * @param object  Source object\r\n   * @param format  A specific format to apply\r\n   * @return Formatted value\r\n   */\n\n\n  Sprite.prototype.getTagValueFromObject = function (parts, object, format) {\n    var current = object;\n    var formatApplied = false;\n\n    for (var i = 0, len = parts.length; i < len; i++) {\n      var part = parts[i];\n\n      if (part.prop) {\n        // Regular property\n        current = current[part.prop];\n\n        if (!$type.hasValue(current)) {\n          // Not set, return undefined\n          return;\n        }\n      } else {\n        // Method\n        switch (part.method) {\n          case \"formatNumber\":\n            var numberValue = $utils.anyToNumber(current);\n\n            if ($type.hasValue(numberValue)) {\n              current = this.numberFormatter.format(numberValue, format || part.params[0] || undefined);\n              formatApplied = true;\n            }\n\n            break;\n\n          case \"formatDate\":\n            var dateValue = void 0;\n\n            if ($type.isString(current)) {\n              dateValue = this.dateFormatter.parse(current);\n            } else {\n              dateValue = $utils.anyToDate(current);\n            }\n\n            if (!$type.isDate(dateValue) || $type.isNaN(dateValue.getTime())) {\n              // Was not able to get date out of value, quitting and letting\n              // calling method try another value\n              return;\n            }\n\n            if ($type.hasValue(dateValue)) {\n              current = this.dateFormatter.format(dateValue, format || part.params[0] || undefined);\n              formatApplied = true;\n            }\n\n            break;\n\n          case \"formatDuration\":\n            var durationValue = $utils.anyToNumber(current);\n\n            if ($type.hasValue(durationValue)) {\n              current = this.durationFormatter.format(durationValue, format || part.params[0] || undefined, part.params[1] || undefined);\n              formatApplied = true;\n            }\n\n            break;\n\n          case \"urlEncode\":\n          case \"encodeURIComponent\":\n            current = encodeURIComponent(current);\n            break;\n\n          default:\n            if (current[part.method]) {\n              current[part.method].apply(this, part.params);\n            }\n\n            break;\n        }\n      }\n    } // Apply default format if it wasn't applied explicitly\n\n\n    if (!formatApplied) {\n      var formatParts = [{\n        method: \"\",\n        params: format\n      }];\n\n      if (!$type.hasValue(format)) {\n        // Format is not set\n        // Determine from the type of the value\n        if ($type.isNumber(current)) {\n          formatParts[0].method = \"formatNumber\";\n          formatParts[0].params = \"\";\n        } else if ($type.isDate(current)) {\n          formatParts[0].method = \"formatDate\";\n          formatParts[0].params = \"\";\n        }\n      } else {\n        // Format set\n        // Try to determine formatter based on the format\n        var formatterType = $utils.getFormat(format); // format\n\n        if (formatterType === $strings.NUMBER) {\n          formatParts[0].method = \"formatNumber\";\n        } else if (formatterType === $strings.DATE) {\n          formatParts[0].method = \"formatDate\";\n        } else if (formatterType === $strings.DURATION) {\n          formatParts[0].method = \"formatDuration\";\n        }\n      } // Apply format\n\n\n      if (formatParts[0].method) {\n        current = this.getTagValueFromObject(formatParts, current);\n      }\n    }\n\n    return current;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"dataItem\", {\n    /**\r\n     * @return [[DataItem]]\r\n     */\n    get: function get() {\n      if (!this._dataItem) {\n        if (this.virtualParent) {\n          return this.virtualParent.dataItem;\n        }\n\n        if (this.parent) {\n          return this.parent.dataItem;\n        }\n      }\n\n      return this._dataItem;\n    },\n\n    /**\r\n     * A [[DataItem]] to use as element's data source.\r\n     *\r\n     * @todo Review type\r\n     * @param dataItem  DataItem\r\n     */\n    set: function set(dataItem) {\n      //an not use this[\"_dataItem\"] here, as we return parent data item if this sprite doesn't have one.\n      // @todo:think about it\n      this.setDataItem(dataItem);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets currently used [[DataItem]].\r\n   *\r\n   * If the element has also `configField` set, it will also look for any\r\n   * config in DataItem's data context to apply to this element.\r\n   *\r\n   * @param dataItem DataItem\r\n   */\n\n  Sprite.prototype.setDataItem = function (dataItem) {\n    var _this = this;\n\n    if (this._dataItem != dataItem) {\n      this._dataItem = dataItem;\n\n      if (dataItem) {\n        if (this.configField) {\n          var dataContext_1 = dataItem.dataContext;\n\n          if (dataContext_1) {\n            this.config = dataContext_1[this.configField];\n\n            if (!this.config && dataContext_1.dataContext) {\n              this.config = dataContext_1.dataContext[this.configField];\n            }\n          }\n        }\n\n        var dataContext_2 = dataItem.dataContext;\n\n        if (dataContext_2) {\n          var dataContext2_1 = dataContext_2.dataContext;\n          $object.each(this.propertyFields, function (propertyName, fieldValue) {\n            if ($type.hasValue(dataContext_2[fieldValue])) {\n              var anyThis = _this;\n              anyThis[propertyName] = dataContext_2[fieldValue];\n            } else {\n              if (dataContext2_1) {\n                var value = dataContext2_1[fieldValue];\n\n                if ($type.hasValue(value)) {\n                  var anyThis = _this;\n                  anyThis[propertyName] = value;\n                }\n              }\n            }\n          });\n        }\n      }\n\n      this.invalidate();\n    }\n  };\n  /**\r\n   * ==========================================================================\r\n   * PROPERTY UTILITIES\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Returns element's property value.\r\n   *\r\n   * Will check if there are any bindings with [[DataItem]].\r\n   *\r\n   * Will also apply any adapters bound to `propertyName`.\r\n   *\r\n   * @param propertyName  Property name\r\n   * @return Property value\r\n   */\n\n\n  Sprite.prototype.getPropertyValue = function (propertyName) {\n    var propValue = this.properties[propertyName]; // Apply adapter\n\n    if (!this._isTemplate) {\n      if (this._adapterO) {\n        propValue = this._adapterO.apply(propertyName, propValue);\n      }\n    }\n\n    return propValue;\n  };\n\n  Sprite.prototype.setColorProperty = function (property, value, invalidate) {\n    var currentValue = this.properties[property];\n\n    if (value instanceof Color && currentValue instanceof Color && value.toString() == currentValue.toString()) {\n      return false;\n    } else {\n      return this.setPropertyValue(property, value, invalidate);\n    }\n  };\n\n  Sprite.prototype.setPercentProperty = function (property, value, invalidate, transform, precision, floor) {\n    value = $type.toNumberOrPercent(value);\n\n    if ($type.isNumber(value)) {\n      value = $math.round(value, precision, floor);\n      return this.setPropertyValue(property, value, invalidate, transform);\n    } else {\n      var currentValue = this.properties[property];\n\n      if (value instanceof Percent && currentValue instanceof Percent && value.value == currentValue.value) {\n        return false;\n      } else {\n        return this.setPropertyValue(property, value, invalidate, transform);\n      }\n    }\n  };\n  /**\r\n   * Sets elements's property value. Will also propagate the same property value\r\n   * on all element's clones.\r\n   *\r\n   * @param property    Property\r\n   * @param value       Value\r\n   * @param invalidate  Should the sprite be invalidated, cause it's re-rendering\r\n   * @param transform   Re-apply positioning of the element\r\n   * @return Did the value change? It will return `true` if the new value and the old value of the property are not the same\r\n   * @todo Review propagation to clones. Right now we simply check if clone is disposed before setting the same property on it. It's better to remove from clone list altogether.\r\n   */\n\n\n  Sprite.prototype.setPropertyValue = function (property, value, invalidate, transform) {\n    if (this.properties[property] !== value && !this.isDisposed()) {\n      this.properties[property] = value;\n\n      if (this.events.isEnabled(\"propertychanged\")) {\n        var event_1 = {\n          type: \"propertychanged\",\n          target: this,\n          property: property\n        };\n        this.events.dispatchImmediately(\"propertychanged\", event_1);\n      }\n\n      if (invalidate) {\n        this.invalidate();\n      }\n\n      if (transform) {\n        this.invalidatePosition();\n      }\n\n      if (this.applyOnClones) {\n        var clones = this.clones.values;\n        var length_2 = clones.length;\n\n        for (var i = 0; i < length_2; ++i) {\n          var clone = clones[i];\n\n          if (!clone.isDisposed()) {\n            //(<Sprite>clone).setPropertyValue(<any>property, value, invalidate, transform);\n            clone[property] = value;\n          }\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n\n  Sprite.prototype.bind = function (property, source, bindToProperty, modifier) {\n    var _this = this;\n\n    if (bindToProperty === void 0) {\n      bindToProperty = property;\n    }\n\n    if ($type.hasValue(this._bindings[property])) {\n      this._bindings[property].dispose();\n    } // set current value\n\n\n    this[property] = source[bindToProperty]; //source.addEventListener(AMEvent.PROPERTY_CHANGED, this.handleBindings, false, this);\n\n    this._bindings[property] = source.events.on(\"propertychanged\", function (event) {\n      if (event.property === bindToProperty) {\n        var value = source[bindToProperty];\n\n        if (modifier) {\n          value = modifier(value);\n        } // TODO clonesById\n\n\n        _this[property] = value;\n      }\n    });\n  };\n  /**\r\n   * Sets up and obeserver function to monitor changes in particular property\r\n   * or properties.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param property  Element's property name\r\n   * @param listener  Handler function\r\n   * @param context   Context for handler function\r\n   * @returns Event Disposer\r\n   */\n\n\n  Sprite.prototype.observe = function (property, listener, context, shouldClone) {\n    var _this = this;\n\n    return new MultiDisposer($array.map($array.toArray(property), function (prop) {\n      return _this.events.on(\"propertychanged\", function (e) {\n        if (e.property === prop) {\n          listener.call(context, e);\n        }\n      }, context, shouldClone);\n    }));\n  };\n  /**\r\n   * ==========================================================================\r\n   * ACCESSIBILITY-RELATED PROPERTIES\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Applies accessibility to the SVG element.\r\n   *\r\n   * Adds `<title>` and `<description>` elements as well as `aria-labelledby`\r\n   * and `role` properties.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.applyAccessibility = function () {\n    // Check if we need to add label and description\n    var title = this.readerTitle,\n        description = this.readerDescription,\n        role = this.role,\n        hidden = this.readerHidden,\n        checked = this.readerChecked,\n        controls = this.readerControls,\n        live = this.readerLive,\n        orientation = this.readerOrientation,\n        valueNow = this.readerValueNow,\n        valueText = this.readerValueText; // Init label/describe ids\n\n    var labelledByIds = [],\n        describedByIds = [];\n    var labelledBy = this.readerLabelledBy;\n\n    if (labelledBy) {\n      labelledByIds.push(labelledBy);\n    }\n\n    var describedBy = this.readerDescribedBy;\n\n    if (describedBy) {\n      describedByIds.push(describedBy);\n    } // Consolidate title and description if system tooltip is disabled\n\n\n    if (!this.showSystemTooltip && title) {\n      if (description) {\n        description = title + \" -- \" + description;\n      } else {\n        description = title;\n      }\n\n      title = undefined;\n    } // If we have only label, we use `aria-label` attribute.\n    // If there are both label and description, we'll go with separate tags and\n    // use `aria-labelledby`\n\n\n    if (title && !description && !this.showSystemTooltip) {\n      // Only label is set, use attribute\n      this.setSVGAttribute({\n        \"aria-label\": title\n      }); // Remove previous elements\n\n      this.removeSVGAttribute(\"aria-description\");\n\n      if (this._titleElement) {\n        this.group.removeElement(this._titleElement);\n        this._titleElement = undefined;\n      }\n\n      if (this._descriptionElement) {\n        this.group.removeElement(this._descriptionElement);\n        this._descriptionElement = undefined;\n      }\n    } else {\n      if (title) {\n        var titleElement = this.titleElement;\n        var titleId = this.uid + \"-title\";\n\n        if (titleElement.node.textContent != title) {\n          titleElement.node.textContent = title;\n          titleElement.attr({\n            id: titleId\n          });\n        }\n\n        labelledByIds.push(titleId);\n      } else if (this._titleElement) {\n        this.group.removeElement(this._titleElement);\n        this._titleElement = undefined;\n      }\n\n      var descriptionId = this.uid + \"-description\";\n\n      if (description) {\n        var descriptionElement = this.descriptionElement;\n\n        if (descriptionElement.node.textContent != description) {\n          descriptionElement.node.textContent = description;\n          descriptionElement.attr({\n            id: descriptionId\n          });\n        }\n\n        describedByIds.push(descriptionId);\n      } else if (this._descriptionElement) {\n        this.group.removeElement(this._descriptionElement);\n        this._descriptionElement = undefined;\n        $array.remove(describedByIds, descriptionId);\n      }\n    } // Add label and described properties\n\n\n    if (labelledByIds.length) {\n      this.setSVGAttribute({\n        \"aria-labelledby\": labelledByIds.join(\" \")\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-labelledby\");\n    }\n\n    if (describedByIds.length) {\n      this.setSVGAttribute({\n        \"aria-describedby\": describedByIds.join(\" \")\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-describedby\");\n    } // Apply role\n\n\n    if (role) {\n      this.setSVGAttribute({\n        \"role\": role\n      });\n    } else {\n      this.removeSVGAttribute(\"role\");\n    } // Apply aria-hidden\n\n\n    if (hidden) {\n      this.setSVGAttribute({\n        \"aria-hidden\": \"true\"\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-hidden\");\n    } // Apply aria-checked\n\n\n    if (checked) {\n      this.setSVGAttribute({\n        \"aria-checked\": \"true\"\n      });\n    } else if (checked === false) {\n      this.setSVGAttribute({\n        \"aria-checked\": \"false\"\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-checked\");\n    } // Apply aria-controls\n\n\n    if (controls) {\n      this.setSVGAttribute({\n        \"aria-controls\": controls\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-controls\");\n    } // Apply aria-live\n\n\n    if (live) {\n      this.setSVGAttribute({\n        \"aria-live\": live\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-live\");\n    } // Apply aria-orientation\n\n\n    if (orientation) {\n      this.setSVGAttribute({\n        \"aria-orientation\": orientation\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-orientation\");\n    } // Apply aria-valuenow\n\n\n    if (valueNow) {\n      this.setSVGAttribute({\n        \"aria-valuenow\": valueNow\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-valuenow\");\n    } // Apply aria-valuetext\n\n\n    if (valueText) {\n      this.setSVGAttribute({\n        \"aria-valuetext\": valueText\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-valuetext\");\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"readerTitle\", {\n    /**\r\n     * @return Title\r\n     */\n    get: function get() {\n      var title = this.getPropertyValue(\"readerTitle\");\n\n      if ($type.hasValue(title) && this.dataItem) {\n        return this.populateString(title);\n      }\n\n      return title;\n    },\n\n    /**\r\n     * Screen reader title of the element.\r\n     *\r\n     * @param value Title\r\n     */\n    set: function set(value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"readerTitle\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerDescription\", {\n    /**\r\n     * @return Description\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"readerDescription\");\n    },\n\n    /**\r\n     * Screen reader description of the element.\r\n     *\r\n     * @param value Description\r\n     */\n    set: function set(value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"readerDescription\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"role\", {\n    /**\r\n     * @return Role\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"role\");\n    },\n\n    /**\r\n     * A WAI-ARIA role for the element.\r\n     *\r\n     * @see {@link https://www.w3.org/TR/wai-aria-1.1/#role_definitions} for more information on WAI-ARIA roles\r\n     * @param value  Role\r\n     */\n    set: function set(value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"role\", value)) {\n        this.applyAccessibility();\n\n        if (value == \"slider\") {\n          this.setSVGAttribute({\n            \"aria-valuemin\": \"0\"\n          });\n          this.setSVGAttribute({\n            \"aria-valuemax\": \"100\"\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerHidden\", {\n    /**\r\n     * @return Hidden?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"readerHidden\");\n    },\n\n    /**\r\n     * Controls if element should be hidden from screen readers.\r\n     *\r\n     * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-hidden} for more information\r\n     * @param value  Hidden?\r\n     */\n    set: function set(value) {\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"readerHidden\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerChecked\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Checked?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"readerChecked\");\n    },\n\n    /**\r\n     * Controls if element is currently marked as \"checked\".\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-checked} for more information\r\n     * @param value Checked?\r\n     */\n    set: function set(value) {\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"readerChecked\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerControls\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Setting value\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"readerControls\");\n    },\n\n    /**\r\n     * A `uid` of an element this element controls.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-controls} for more information\r\n     * @param value Setting value\r\n     */\n    set: function set(value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"readerControls\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerLive\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Setting value\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"readerLive\");\n    },\n\n    /**\r\n     * Controls accessibility setting \"aria-live\" for the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions} for more information\r\n     * @param value Setting value\r\n     */\n    set: function set(value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"readerLive\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerLabelledBy\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Target element\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"readerLabelledBy\");\n    },\n\n    /**\r\n     * A `uid` of an element that describes this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-labelledby} for more information\r\n     * @param value Target element\r\n     */\n    set: function set(value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"readerLabelledBy\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerDescribedBy\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Target element\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"readerDescribedBy\");\n    },\n\n    /**\r\n     * A `uid` of an element that describes this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-describedby} for more information\r\n     * @param value Target element\r\n     */\n    set: function set(value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"readerDescribedBy\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerOrientation\", {\n    /**\r\n     * @return Orientation\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"readerOrientation\");\n    },\n\n    /**\r\n     * Orientation of the element.\r\n     *\r\n     * @since 4.7.16\r\n     * @param value Orientation\r\n     */\n    set: function set(value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"readerOrientation\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerValueNow\", {\n    /**\r\n     * @return Current value\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"readerValueNow\");\n    },\n\n    /**\r\n     * Current value of the element.\r\n     *\r\n     * @since 4.7.16\r\n     * @param value Current value\r\n     */\n    set: function set(value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"readerValueNow\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerValueText\", {\n    /**\r\n     * @return Current value (text)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"readerValueText\");\n    },\n\n    /**\r\n     * Text representation of the current value of the element.\r\n     *\r\n     * @since 4.7.16\r\n     * @param value Current value (text)\r\n     */\n    set: function set(value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"readerValueText\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"keyboardOptions\", {\n    /**\r\n     * ==========================================================================\r\n     * USER INTERACTIONS\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Returns elements keyboard options.\r\n     *\r\n     * @return Keyboard options\r\n     */\n    get: function get() {\n      if (!this.interactions.keyboardOptions) {\n        if (this.virtualParent) {\n          return this.virtualParent.keyboardOptions;\n        }\n\n        if (this.parent) {\n          return this.parent.keyboardOptions;\n        }\n      }\n\n      return this.interactions.keyboardOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"mouseOptions\", {\n    /**\r\n     * Mouse options.\r\n     *\r\n     * Enables controlling options related to the mouse, for example sensitivity\r\n     * of its mouse wheel.\r\n     *\r\n     * E.g. the below will reduce chart's wheel-zoom speed to half its default\r\n     * speed:\r\n     *\r\n     * ```TypeScript\r\n     * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"plotContainer\": {\r\n     *     \"mouseOptions\": {\r\n     *       \"sensitivity\": 0.5\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @return Mouse options\r\n     */\n    get: function get() {\n      if (!this.interactions.mouseOptions) {\n        if (this.virtualParent) {\n          return this.virtualParent.mouseOptions;\n        }\n\n        if (this.parent) {\n          return this.parent.mouseOptions;\n        }\n      }\n\n      return this.interactions.mouseOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"interactions\", {\n    /**\r\n     * Returns (creates if necessary) an [[InteractionObject]] associated with\r\n     * this element.\r\n     *\r\n     * [[InteractionObject]] is used to attach all kinds of user-interactions to\r\n     * the element, e.g. click/touch, dragging, hovering, and similar events.\r\n     *\r\n     * @return Interaction object\r\n     */\n    get: function get() {\n      if (!this._interaction) {\n        var interaction = getInteraction().getInteraction(this.dom);\n        this._interaction = interaction;\n        this._interaction.clickable = this.clickable;\n        this._interaction.hoverable = this.hoverable;\n        this._interaction.trackable = this.trackable;\n        this._interaction.draggable = this.draggable;\n        this._interaction.swipeable = this.swipeable;\n        this._interaction.resizable = this.resizable;\n        this._interaction.wheelable = this.wheelable;\n        this._interaction.contextMenuDisabled = this.contextMenuDisabled;\n        this._interaction.inert = this.inert;\n        this._interaction.sprite = this;\n\n        this._disposers.push(this._interaction);\n      }\n\n      return this._interaction;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns true if interactions object was created. Mostly used just to avoid creating interactions object if not needed.\r\n   * @return Is Sprite interactive?\r\n   */\n\n  Sprite.prototype.isInteractive = function () {\n    if (this._interaction) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"focusable\", {\n    /**\r\n     * @return Can element be focused?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"focusable\");\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * ELEMENT FOCUS-RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Controls if the element can gain focus.\r\n     *\r\n     * Focusable element will be selectable via TAB key.\r\n     *\r\n     * Please note, clicking it with a mouse or touching will not add focus to\r\n     * it.\r\n     *\r\n     * Focused element will show a system-specific highlight, which might ruin\r\n     * the overal look. This is why we don't focus element on click/touch.\r\n     *\r\n     * A default setting varies for different elements. By default all elements\r\n     * are not focusable, except certain items like buttons, legend items, etc.\r\n     *\r\n     * @default undefined (auto)\r\n     * @param value  Can element be focused?\r\n     */\n    set: function set(value) {\n      var _this = this;\n\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"focusable\", value)) {\n        if (!value && !this.isInteractive()) {} else {\n          this.interactions.focusable = value;\n\n          if (value) {\n            this.setSVGAttribute({\n              \"focusable\": value\n            });\n\n            if (!this._tabindex) {\n              this.tabindex = 0;\n            }\n          } else {\n            this.removeSVGAttribute(\"focusable\");\n            this.tabindex = undefined;\n          } // Set focus events that would apply \"focus\" state\n          // setEventDisposer will also remove listeners if value == false\n\n\n          this.interactions.setEventDisposer(\"sprite-focusable\", value, function () {\n            return new MultiDisposer([_this.events.on(\"blur\", _this.handleBlur, _this, false), _this.events.on(\"focus\", _this.handleFocus, _this, false)]);\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Applies filters (if set) when element gains focus.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Original event\r\n   */\n\n  Sprite.prototype.handleFocus = function (ev) {\n    if (this.focusable) {\n      if (this.topParent) {\n        this.topParent.hasFocused = true;\n      }\n\n      if (this.focusFilter) {\n        // Any `filters` manipulation will trigger `applyFilters()` so we don't\n        // need to call it here\n        this.filters.push(this.focusFilter);\n      }\n\n      if (this.hoverOnFocus) {\n        // Trigger a hover event as well\n        this.isHover = true;\n        this.handleOver();\n      }\n    }\n  };\n  /**\r\n   * Removes focus filter (if set) when elementloses focus.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Original event\r\n   */\n\n\n  Sprite.prototype.handleBlur = function (ev) {\n    if (this.focusable) {\n      if (this.topParent) {\n        this.topParent.hasFocused = false;\n      }\n\n      if (this.focusFilter) {\n        // Any `filters` manipulation will trigger `applyFilters()` so we don't\n        // need to call it here\n        this.filters.removeValue(this.focusFilter);\n      }\n\n      if (this.hoverOnFocus) {\n        // Trigger a out event as well\n        this.isHover = false;\n        this.handleOut();\n      }\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"focusFilter\", {\n    /**\r\n     * A reference to a [[Filter]] to apply to element when it gains focus.\r\n     *\r\n     * Normally, browsers will draw a default ugly square around focused element,\r\n     * which totally makes sense because its purpose is to help identify active\r\n     * element for visually impaired people.\r\n     *\r\n     * However, if you would rather apply a filter, so you can modify how focused\r\n     * element looks like, use `focusFilter`.\r\n     *\r\n     * Simply set it to an anstance of [[FocusFilter]], or any other filter\r\n     * object.\r\n     *\r\n     * ```TypeScript\r\n     * chart.focusFilter = new am4core.FocusFilter();\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.focusFilter = new am4core.FocusFilter();\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"focusFilter\": {\r\n     *     \"type\": \"FocusFilter\"\r\n     *   },\r\n     *   // ...\r\n     * }\r\n     * ```\r\n     *\r\n     * @see {@link Filter}\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/accessibility/} more about accessibility\r\n     * @see {@link https://www.amcharts.com/docs/v4/tutorials/changing-appearance-of-focused-items/} cusomizing focus appearance\r\n     * @ignore Exclude from docs\r\n     * @return Focused element filter\r\n     */\n    get: function get() {\n      /*if (!this._focusFilter) {\r\n          this._focusFilter = new FocusFilter();\r\n          this._disposers.push(this._focusFilter);\r\n      }*/\n      //return this._focusFilter;\n      var focusFilter = this._focusFilter;\n\n      if (focusFilter) {\n        return focusFilter;\n      }\n\n      if (this.virtualParent) {\n        return this.virtualParent.focusFilter;\n      } else if (this.parent) {\n        return this.parent.focusFilter;\n      } //this._focusFilter = new FocusFilter();\n      //this._disposers.push(this._focusFilter);\n\n    },\n\n    /**\r\n     * @see {@link Filter}\r\n     * @ignore Exclude from docs\r\n     * @todo This is still experimental, don't use it\r\n     */\n    set: function set(value) {\n      this._focusFilter = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"hoverOnFocus\", {\n    /**\r\n     * @return Trigger hover on focus?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"hoverOnFocus\");\n    },\n\n    /**\r\n     * If set to `true`, this element will also trigger `\"over\"` event with all\r\n     * the related consequences, like \"hover\" state being applied and tooltip\r\n     * being shown.\r\n     *\r\n     * Useful as an accessibility feature to display rollover tooltips on items\r\n     * selected via keyboard.\r\n     *\r\n     * @param value  Trigger hover on focus?\r\n     * @default false\r\n     */\n    set: function set(value) {\n      if (value !== this.hoverOnFocus) {\n        this.setPropertyValue(\"hoverOnFocus\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tabindex\", {\n    /**\r\n     * Returns current TAB index for focusable item.\r\n     *\r\n     * @return TAB index\r\n     */\n    get: function get() {\n      var index = this._tabindex;\n\n      if (index != null) {\n        return index;\n      } else if (this.virtualParent) {\n        return this.virtualParent.tabindex;\n      } else if (this.parent) {\n        return this.parent.tabindex;\n      }\n    },\n\n    /**\r\n     * Sets TAB index.\r\n     *\r\n     * Tab index maintains the order in which focusable elements gain focus when\r\n     * TAB key is pressed.\r\n     *\r\n     * Please note, tab index is not local to the chart. It affects the whole\r\n     * of the page, including non-SVG elements. Maintain extreme causion when\r\n     * setting tab indexes, as it affects the user experience for the whole\r\n     * web page.\r\n     *\r\n     * @param value TAB index\r\n     */\n    set: function set(value) {\n      value = $type.toNumber(value);\n\n      if (this.setPropertyValue(\"tabindex\", value) && $type.isNumber(value)) {\n        this.interactions.tabindex = value;\n        this.setSVGAttribute({\n          \"tabindex\": value\n        });\n        this._tabindex = value;\n\n        if (value > -1) {\n          this.focusable = true;\n        } else {\n          this.focusable = undefined;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"inertiaOptions\", {\n    /**\r\n     * ==========================================================================\r\n     * DRAGGING AND RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Returns element's options to be used for inertia. This setting is\r\n     * inheritable, meaning that if not set directly, it will search in all its\r\n     * ascendants until very top.\r\n     *\r\n     * Inertia is used only if element's `inert` is set to `true`.\r\n     *\r\n     * \"Inert\" element, when dragged and released, will carry the momentum of the\r\n     * movement, and will continue moving in the same drag direction, gradually\r\n     * reducing in speed until finally stops.\r\n     *\r\n     * Check [[IInertiaOptions]] for how you tweak inertia animations.\r\n     *\r\n     * @return Inertia options\r\n     */\n    get: function get() {\n      if (!this.interactions.inertiaOptions) {\n        if (this.parent) {\n          return this.parent.inertiaOptions;\n        }\n      }\n\n      return this.interactions.inertiaOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"draggable\", {\n    /**\r\n     * @return `true` if element can be dragged\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"draggable\");\n    },\n\n    /**\r\n     * Controls if the element is draggable.\r\n     *\r\n     * @param value  `true` if element can be dragged\r\n     */\n    set: function set(value) {\n      var _this = this;\n\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"draggable\", value)) {\n        if (!value && !this.isInteractive()) {} else {\n          this.applyCursorStyle();\n          this.interactions.draggable = value; //interaction.processDraggable(this);\n          // Add events\n          // @todo Maybe attach to InteractionObject's multidisposer so that\n          // sprites events get disposed together with them?\n          // this.interactions.disposers.getItem(\"movable\")\n          // setEventDisposer will also remove listeners if value == false\n\n          this.interactions.setEventDisposer(\"sprite-draggable\", value, function () {\n            return new MultiDisposer([_this.events.on(\"down\", _this.handleDown, _this, false), _this.events.on(\"dragstart\", _this.handleDragStart, _this, false), _this.events.on(\"drag\", _this.handleDragMove, _this, false), _this.events.on(\"dragstop\", _this.handleDragStop, _this, false)]);\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Executes when dragged element is being started to drag.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Sprite.prototype.handleDragStart = function (ev) {\n    if (!this.interactions.isTouchProtected || !ev.touch) {\n      this.interactions.originalPosition = {\n        x: this.pixelX,\n        y: this.pixelY\n      };\n      this._isDragged = true;\n      this.hideTooltip(0);\n    }\n  };\n  /**\r\n   * Tell this element to start being dragged. This is useful if you want to\r\n   * drag items by interactions performed not directly on the target element.\r\n   *\r\n   * Parameter `pointer` is highly recommended. By passing in the Pointer you\r\n   * will ensure that movement is tracked for the pointer that you want. If not\r\n   * supplied, the system will try to determine the most logical pointer.\r\n   *\r\n   * However this may fail if you have more than one pointer active, which\r\n   * might happen if you have several objects being dragged on a touch device.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param pointer Pointer to use for movement\r\n   */\n\n\n  Sprite.prototype.dragStart = function (pointer) {\n    //this.dragStop(pointer);\n    //this.draggable = true;\n    this._isDragged = true;\n    getInteraction().dragStart(this.interactions, pointer);\n  };\n  /**\r\n   * Executes when dragged element is being dropped.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.handleDragStop = function (ev) {\n    if (!this.interactions.isTouchProtected || !ev.touch) {\n      this._isDragged = false;\n      this.showTooltip();\n      this.interactions.originalPosition = undefined;\n    }\n  };\n  /**\r\n   * Stops manually initiated dragging of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param pointer Pointer to use as a reference\r\n   */\n\n\n  Sprite.prototype.dragStop = function (pointer) {\n    //this.draggable = false;\n    this._isDragged = false;\n    getInteraction().dragStop(this.interactions, pointer); //this.handleDragStop();\n  };\n  /**\r\n   * Executes when {Sprite} is being dragged.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   * @todo Implement parent position offset calculation\r\n   */\n\n\n  Sprite.prototype.handleDragMove = function (ev) {\n    if (!this.interactions.isTouchProtected || !ev.touch) {\n      var point = this.interactions.originalPosition;\n\n      if (point && this._isDragged) {\n        var globalScale = this.parent.globalScale * this.svgContainer.cssScale;\n        this.moveTo({\n          x: point.x + ev.shift.x / globalScale,\n          y: point.y + ev.shift.y / globalScale\n        }, undefined, undefined, true);\n      }\n\n      this.dispatchImmediately(\"dragged\", ev);\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"inert\", {\n    /**\r\n     * @return `true` if element should use inertia when animated\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"inert\");\n    },\n\n    /**\r\n     * Controls if the element should use inertia when interacted with.\r\n     *\r\n     * \"Inert\" element, when dragged and released, will carry the momentum of the\r\n     * movement, and will continue moving in the same drag direction, gradually\r\n     * reducing in speed until finally stops.\r\n     *\r\n     * @default false\r\n     * @param value `true` if element should use inertia when animated\r\n     */\n    set: function set(value) {\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"inert\", value)) {\n        if (!value && !this.isInteractive()) {// void\n        } else {\n          this.interactions.inert = value;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"hoverOptions\", {\n    /**\r\n     * ==========================================================================\r\n     * HOVERING\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Returns Sprite's hover options.\r\n     *\r\n     * @see {@link IHoverOptions} for available options.\r\n     * @return Options\r\n     */\n    get: function get() {\n      if (!this.interactions.hoverOptions) {\n        if (this.virtualParent) {\n          return this.virtualParent.hoverOptions;\n        }\n\n        if (this.parent) {\n          return this.parent.hoverOptions;\n        }\n      }\n\n      return this.interactions.hoverOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"hoverable\", {\n    /**\r\n     * @return `true` if element is hoverable\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"hoverable\");\n    },\n\n    /**\r\n     * Controls if the element is hoverable (hover events are registered).\r\n     *\r\n     * Use `over` and `out` events, to watch for those respective actions.\r\n     *\r\n     * @default false\r\n     * @param value `true` if element can be hovered\r\n     */\n    set: function set(value) {\n      var _this = this;\n\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"hoverable\", value)) {\n        if (!value && !this.isInteractive()) {// void\n        } else {\n          this.applyCursorStyle();\n          this.interactions.hoverable = value; // setEventDisposer will also remove listeners if value == false\n\n          this.interactions.setEventDisposer(\"sprite-hoverable\", value, function () {\n            return new MultiDisposer([_this.events.on(\"over\", _this.handleOver, _this, false), _this.events.on(\"out\", _this.handleOut, _this, false)]);\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Handles tasks when element becomes hovered:\r\n   * * Shows [[Tooltip]] if applicable\r\n   * * Applies \"hover\" state\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   */\n\n  Sprite.prototype.handleOver = function (ev) {\n    if (this._outTimeout) {\n      this._outTimeout.dispose();\n    }\n\n    if (this.isHover) {\n      if (this.states.hasKey(\"hover\")) {\n        //this.setState(\"hover\");\n        // This will check `isHover` and will set \"hover\" state\n        if (!this.isHidden) {\n          this.applyCurrentState();\n        }\n      }\n\n      var point = void 0;\n\n      if (ev && ev.pointer) {\n        point = $utils.documentPointToSvg(ev.pointer.point, this.svgContainer.SVGContainer, this.svgContainer.cssScale);\n      }\n\n      if (this.showTooltipOn == \"hover\") {\n        this.showTooltip(point);\n      }\n    } else {\n      if (this.showTooltipOn == \"hover\") {\n        this.hideTooltip();\n      }\n\n      if (!this.isHidden && this.states.hasKey(\"hover\")) {\n        this.applyCurrentState();\n      }\n    }\n  };\n  /**\r\n   * Handles tasks when element loses hover:\r\n   *\r\n   * * Hides [[Tooltip]]\r\n   * * Applies default state\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev [description]\r\n   */\n\n\n  Sprite.prototype.handleOut = function (ev) {\n    var _this = this;\n\n    if (this.tooltip && this.tooltip.targetSprite == this && this.tooltip.keepTargetHover) {\n      this._outTimeout = this.setTimeout(function () {\n        if (!_this.tooltip.isHover) {\n          if (_this.tooltip.targetSprite == _this) {\n            _this.hideTooltip();\n          }\n\n          _this._outTimeout = _this.setTimeout(_this.handleOutReal.bind(_this), _this.rollOutDelay);\n        }\n      }, 10);\n      return;\n    }\n\n    if (this.showTooltipOn == \"hover\") {\n      this.hideTooltip();\n    }\n\n    this._outTimeout = this.setTimeout(this.handleOutReal.bind(this), this.rollOutDelay);\n  };\n  /**\r\n   * [handleOutReal description]\r\n   *\r\n   * @ignore\r\n   * @todo description\r\n   */\n\n\n  Sprite.prototype.handleOutReal = function () {\n    if (!this.isHidden && !this.isHiding && this.states.hasKey(\"hover\")) {\n      this.applyCurrentState();\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"hitOptions\", {\n    /**\r\n     * ==========================================================================\r\n     * CLICKING/TAPPING AND TOGGLING STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Returns Sprite's click (hit) options.\r\n     *\r\n     * Click (hit) options control things like double-click, timeouts, etc.\r\n     *\r\n     * @see {@link IHitOptions} for available options.\r\n     * @return Options\r\n     */\n    get: function get() {\n      if (!this.interactions.hitOptions) {\n        if (this.virtualParent) {\n          return this.virtualParent.hitOptions;\n        }\n\n        if (this.parent) {\n          return this.parent.hitOptions;\n        }\n      }\n\n      return this.interactions.hitOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Prepares element's after `down` event.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event\r\n   */\n\n  Sprite.prototype.handleDown = function (ev) {\n    if (this.interactions.downPointers.length === 1) {\n      this.interactions.originalPosition = {\n        x: this.pixelX,\n        y: this.pixelY\n      };\n      this.interactions.originalAngle = this.rotation;\n      this.interactions.originalScale = this.scale;\n\n      if (this.states.hasKey(\"down\")) {\n        this.setState(\"down\");\n      }\n    }\n  };\n  /**\r\n   * Prepares element's after `up` event.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event\r\n   */\n\n\n  Sprite.prototype.handleUp = function (ev) {\n    var _this = this;\n    /*if (!this.isDown) {\r\n        this.interactions.originalPosition = null;\r\n        this.interactions.originalAngle = null;\r\n        this.interactions.originalScale = null;\r\n    }*/\n\n\n    this._isResized = false;\n\n    if (this.states.hasKey(\"down\")) {\n      this.applyCurrentState();\n    }\n\n    if (this.showTooltipOn == \"hit\") {\n      this.showTooltip();\n\n      this._disposers.push(getInteraction().body.events.once(\"down\", function (ev) {\n        _this.hideTooltip();\n      }));\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"clickable\", {\n    /**\r\n     * @return {boolean}\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"clickable\");\n    },\n\n    /**\r\n     * Indicates if the element is clickable.\r\n     *\r\n     * Some type of the elements, like buttons are clickable by default.\r\n     *\r\n     * Most of the elements are not clickable by default.\r\n     *\r\n     * Use `hit`, `doublehit`, `up`, `down`, `toggled` events to watch for\r\n     * respective click/touch actions.\r\n     *\r\n     * @param value `true` if element can be clicked\r\n     */\n    set: function set(value) {\n      var _this = this;\n\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"clickable\", value)) {\n        if (!value && !this.isInteractive()) {// void\n        } else {\n          this.applyCursorStyle();\n          this.interactions.clickable = value; // setEventDisposer will also remove listeners if value == false\n\n          this.interactions.setEventDisposer(\"sprite-clickable\", value, function () {\n            return new MultiDisposer([_this.events.on(\"down\", _this.handleDown, _this, false), _this.events.on(\"up\", _this.handleUp, _this, false)]);\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"togglable\", {\n    /**\r\n     * @return Is togglable?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"togglable\");\n    },\n\n    /**\r\n     * Indicates if element can be toggled on and off by subsequent clicks/taps.\r\n     *\r\n     * Togglable element will alternate its `isActive` property between `true`\r\n     * and `false` with each click.\r\n     *\r\n     * @param value Is togglable?\r\n     */\n    set: function set(value) {\n      var _this = this;\n\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"togglable\", value)) {\n        if (!value && !this.isInteractive()) {// void\n        } else {\n          // setEventDisposer will also remove listeners if value == false\n          this.interactions.setEventDisposer(\"sprite-togglable\", value, function () {\n            return _this.events.on(\"hit\", _this.handleToggle, _this, false);\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Handles toggling of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event\r\n   */\n\n  Sprite.prototype.handleToggle = function (ev) {\n    this.isActive = !this.isActive;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"contextMenuDisabled\", {\n    /**\r\n     * @return Context menu disabled?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"contextMenuDisabled\");\n    },\n\n    /**\r\n     * Should element prevent context menu to be displayed, e.g. when\r\n     * right-clicked?\r\n     *\r\n     * @default false\r\n     * @param value Context menu disabled?\r\n     */\n    set: function set(value) {\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"contextMenuDisabled\", value)) {\n        this.interactions.contextMenuDisabled = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"url\", {\n    /**\r\n     * @return URL\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"url\");\n    },\n\n    /**\r\n     * Click-through URL for this element.\r\n     *\r\n     * If set, clicking/tapping this element will open the new URL in a target\r\n     * window/tab as set by `urlTarget`.\r\n     *\r\n     * Please note that URL will be parsed by data placeholders in curly\r\n     * brackets, to be populated from data. E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * series.columns.template.url = \"https://www.google.com/search?q={category.urlEncode()}\";\r\n     * ```\r\n     * ```JavaScript\r\n     * series.columns.template.url = \"https://www.google.com/search?q={category.urlEncode()}\";\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"columns\": {\r\n     *       \"url\": \"https://www.google.com/search?q={category.urlEncode()}\"\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @param value URL\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"url\", value)) {\n        if (this._urlDisposer) {\n          this._urlDisposer.dispose();\n        } // If URL is not empty, set up events\n\n\n        if ($utils.isNotEmpty(value)) {\n          this._urlDisposer = this.events.on(\"hit\", this.urlHandler, this, false); // Set other required parameters\n\n          this.clickable = true;\n          this.cursorOverStyle = MouseCursorStyle.pointer;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"baseId\", {\n    /**\r\n     * [baseId description]\r\n     *\r\n     * @ignore\r\n     * @return [description]\r\n     */\n    get: function get() {\n      if (!this._baseId && this.parent) {\n        this.baseId = this.parent.baseId;\n      }\n\n      return this._baseId;\n    },\n\n    /**\r\n     * [baseId description]\r\n     *\r\n     * @ignore\r\n     * @param  value  [description]\r\n     */\n    set: function set(value) {\n      this.setBaseId(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Sprite.prototype.setBaseId = function (value) {\n    if (value != this._baseId) {\n      if (this.invalid) {\n        this.invalid = false;\n        registry.removeFromInvalidSprites(this);\n        this.invalidate();\n      }\n\n      this._baseId = value;\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"baseSprite\", {\n    /**\r\n     * Returns the mail chart object that this element belongs to.\r\n     *\r\n     * In most cases it will mean the chart object.\r\n     *\r\n     * Can be used to retrieve chart object in various events and adapters.\r\n     *\r\n     * ```TypeScript\r\n     * chart.seriesContainer.events.on(\"hit\", function(ev) {\r\n     *   console.log(ev.target.baseSprite);\r\n     * });\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.seriesContainer.events.on(\"hit\", function(ev) {\r\n     *   console.log(ev.target.baseSprite);\r\n     * });\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"seriesContainer\": {\r\n     *     \"events\": {\r\n     *       \"hit\": function(ev) {\r\n     *         console.log(ev.target.baseSprite);\r\n     *       }\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @readonly\r\n     * @return  Base chart object\r\n     */\n    get: function get() {\n      if (this.isBaseSprite) {\n        return this;\n      } else if (this.parent) {\n        return this.parent.baseSprite;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"urlTarget\", {\n    /**\r\n     * @return URL target\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"urlTarget\");\n    },\n\n    /**\r\n     * Target to use for URL clicks:\r\n     *\r\n     * * _blank\r\n     * * _self (default)\r\n     * * _parent\r\n     * * _top\r\n     * * Name of the window/frame\r\n     *\r\n     * Ignored if `url` is not set.\r\n     *\r\n     * @param value URL target\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"urlTarget\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Handles URL transition on element click.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev An event object\r\n   */\n\n  Sprite.prototype.urlHandler = function (ev) {\n    // Is URL set?\n    if ($utils.isNotEmpty(this.url)) {\n      // Proceed to the URL\n      var url = this.populateString(this.url);\n\n      if (this.urlTarget === \"_self\") {\n        window.location.href = url;\n      } else {\n        window.open(url, this.urlTarget);\n      }\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"swipeOptions\", {\n    /**\r\n     * ==========================================================================\r\n     * SWIPING GESTURE TRACKING\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Returns element's swipe gesture options.\r\n     *\r\n     * @return Swipe gesture options\r\n     */\n    get: function get() {\n      if (!this.interactions.swipeOptions) {\n        if (this.virtualParent) {\n          return this.virtualParent.swipeOptions;\n        }\n\n        if (this.parent) {\n          return this.parent.swipeOptions;\n        }\n      }\n\n      return this.interactions.swipeOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"swipeable\", {\n    /**\r\n     * @return Element swipable?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"swipeable\");\n    },\n\n    /**\r\n     * Controls if element is swipeable.\r\n     *\r\n     * Swipable element will invoke `swipe`, `swipeleft` and `swiperight` events,\r\n     * when quick horizontal drag action is performed with either mouse or touch.\r\n     *\r\n     * Please note that combining swipe and drag is possible, however will incur\r\n     * a slight but noticeable delay in drag start.\r\n     *\r\n     * @param value  Element swipable?\r\n     */\n    set: function set(value) {\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"swipeable\", value)) {\n        this.applyCursorStyle();\n\n        if (!value && !this.isInteractive()) {// void\n        } else {\n          this.interactions.swipeable = value;\n        } //interaction.processSwipeable(this);\n\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"trackable\", {\n    /**\r\n     * @return Track cursor movement over element?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"trackable\");\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * POINTER TRACKING\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Indicates if the element is trackable (mouse position over it is reported to\r\n     * event listeners).\r\n     *\r\n     * Will invoke `track` events whenever pointer (cursor) changes position\r\n     * while over element.\r\n     *\r\n     * Please note, touch devices will also invoke `track` events when touch\r\n     * point is moved while holding down on a trackable element.\r\n     *\r\n     * @param value Track cursor movement over element?\r\n     */\n    set: function set(value) {\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"trackable\", value)) {\n        if (!value && !this.isInteractive()) {// void\n        } else {\n          this.applyCursorStyle();\n          this.interactions.trackable = value;\n        } //interaction.processTrackable(this);\n\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"wheelable\", {\n    /**\r\n     * @return Mouse wheel events enabled?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"wheelable\");\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * MOUSE-WHEEL RELATED\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Indicates if the element can be interacted with mouse wheel.\r\n     *\r\n     * Will invoke `wheel`, `wheelup`, `wheeldown`, `wheelleft`, and `wheelright`\r\n     * events when using mouse wheel over the element.\r\n     *\r\n     * @param value Mouse wheel events enabled?\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"wheelable\", value)) {\n        if (!value && !this.isInteractive()) {// void\n        } else {\n          this.applyCursorStyle();\n          this.interactions.wheelable = value;\n        } //interaction.processWheelable(this);\n\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"resizable\", {\n    /**\r\n     * @return Element resizable?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"resizable\");\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * RESIZE\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Indicates if this element is resizable.\r\n     *\r\n     * Enabling resize will turn on various interactions on the element. Their\r\n     * actual functionality will depend on other properties.\r\n     *\r\n     * If the element also `draggable`, resize will only happen with two points\r\n     * of contact on a touch device.\r\n     *\r\n     * If the element is not draggable, resize can be performed with just one\r\n     * point of contact, touch or mouse.\r\n     *\r\n     * Will invoke `resize` event every time the size of the element changes.\r\n     *\r\n     * @param value  Element resizable?\r\n     */\n    set: function set(value) {\n      var _this = this;\n\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"resizable\", value)) {\n        if (!value && !this.isInteractive()) {// void\n        } else {\n          this.applyCursorStyle();\n          this.interactions.resizable = value; // setEventDisposer will also remove listeners if value == false\n\n          this.interactions.setEventDisposer(\"sprite-resizable\", value, function () {\n            return new MultiDisposer([_this.events.on(\"down\", _this.handleDown, _this, false), _this.events.on(\"resize\", _this.handleResize, _this, false)]);\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Handles resize intermediate step.\r\n   *\r\n   * By default this method resizes actual element. Each element, can override\r\n   * this method to implement their own resize logic.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   */\n\n  Sprite.prototype.handleResize = function (ev) {\n    if (!this.interactions.isTouchProtected || !ev.touch) {\n      this._isResized = true;\n      this.scale = this.interactions.originalScale * ev.scale;\n      this.validatePosition();\n      /*center: (io.draggable\r\n      ? $math.getMidPoint(point1, point2)\r\n      : {\r\n          \"x\": io.originalPosition.x,\r\n          \"y\": io.originalPosition.y\r\n      })*/\n      //this.moveTo(this.originalPosition.x + ev.shift.x, this.originalPosition.y + ev.shift.y);\n\n      if (this.draggable || this.dragWhileResize) {\n        this._isDragged = false;\n        var svgPoint1 = $utils.documentPointToSvg(ev.point1, this.htmlContainer, this.svgContainer.cssScale);\n        var svgPoint2 = $utils.documentPointToSvg(ev.point2, this.htmlContainer, this.svgContainer.cssScale);\n        var svgMidPoint = $math.getMidPoint(svgPoint1, svgPoint2);\n        var parentPoint1 = $utils.documentPointToSprite(ev.startPoint1, this.parent);\n        var parentPoint2 = $utils.documentPointToSprite(ev.startPoint2, this.parent);\n        var originalPosition = this.interactions.originalPosition;\n        var originalScale = this.interactions.originalScale;\n\n        if (originalPosition) {\n          var spritePoint1 = {\n            x: (parentPoint1.x - originalPosition.x) / originalScale,\n            y: (parentPoint1.y - originalPosition.y) / originalScale\n          };\n          var spritePoint2 = {\n            x: (parentPoint2.x - originalPosition.x) / originalScale,\n            y: (parentPoint2.y - originalPosition.y) / originalScale\n          };\n          var spriteMidPoint = $math.getMidPoint(spritePoint1, spritePoint2);\n          var parentPoint = $utils.svgPointToSprite(svgMidPoint, this.parent);\n          this.moveTo({\n            x: parentPoint.x - spriteMidPoint.x * this.scale,\n            y: parentPoint.y - spriteMidPoint.y * this.scale\n          }, undefined, undefined, true);\n        }\n      }\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"cursorOptions\", {\n    /**\r\n     * ==========================================================================\r\n     * MOUSE-RELATED\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Returns element's cursor options.\r\n     *\r\n     * Cursor options usually define cursor style for various states of the\r\n     * hovered element.\r\n     *\r\n     * Elements inherit `cursorOptions` from their parents if they don't have\r\n     * them set explicitly.\r\n     *\r\n     * @see {@link ICursorOptions} for a list of available options\r\n     * @return Cursor options\r\n     */\n    get: function get() {\n      if (!this.interactions.cursorOptions) {\n        if (this.virtualParent) {\n          return this.virtualParent.cursorOptions;\n        }\n\n        if (this.parent) {\n          return this.parent.cursorOptions;\n        }\n      }\n\n      return this.interactions.cursorOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"cursorOverStyle\", {\n    /**\r\n     * A shortcut to setting mouse cursor on hover.\r\n     *\r\n     * Example:\r\n     *\r\n     * ```TypeScript\r\n     * series.slices.template.cursorOverStyle = am4core.MouseCursorStyle.pointer;\r\n     * ```\r\n     * ```JavaScript\r\n     * series.slices.template.cursorOverStyle = am4core.MouseCursorStyle.pointer;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": {\r\n     *     // ...\r\n     *     \"slices\": {\r\n     *       \"cursorOverStyle\": \"pointer\"\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @param style An array of styles to apply onhover\r\n     */\n    set: function set(style) {\n      if (!this.cursorOptions.overStyle) {\n        this.interactions.cursorOptions = {\n          defaultStyle: this.cursorOptions.defaultStyle\n        };\n      }\n\n      this.cursorOptions.overStyle = style;\n      getInteraction().applyCursorOverStyle(this.interactions);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"cursorDownStyle\", {\n    /**\r\n     * A shortcut to setting mouse cursor when button is pressed down.\r\n     *\r\n     * Example:\r\n     *\r\n     * ```TypeScript\r\n     * series.slices.template.cursorDownStyle = am4core.MouseCursorStyle.grabbing;\r\n     * ```\r\n     * ```JavaScript\r\n     * series.slices.template.cursorDownStyle = am4core.MouseCursorStyle.grabbing;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": {\r\n     *     // ...\r\n     *     \"slices\": {\r\n     *       \"cursorDownStyle\": \"grabbing\"\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @param style An array of styles to apply onhover\r\n     */\n    set: function set(style) {\n      this.cursorOptions.downStyle = style;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Applies default cursor styles for interactable elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Determine if this is necessary. Maybe let's not apply any cursor styles by default\r\n   */\n\n  Sprite.prototype.applyCursorStyle = function () {// Draggable styles\n\n    /*if (this.draggable) {\r\n          if (!$type.hasValue(this.cursorOptions.overStyle)) {\r\n            this.cursorOptions.overStyle = MouseCursorStyle.grab;\r\n        }\r\n          if (!$type.hasValue(this.cursorOptions.downStyle)) {\r\n            this.cursorOptions.downStyle = MouseCursorStyle.grabbing;\r\n        }\r\n    }*/\n  };\n\n  Object.defineProperty(Sprite.prototype, \"interactionsEnabled\", {\n    /**\r\n     * @return Is interaction enabled for this element?\r\n     */\n    get: function get() {\n      var value = this.getPropertyValue(\"interactionsEnabled\");\n\n      if (value === false) {\n        return false;\n      }\n\n      if (this.virtualParent) {\n        return this.virtualParent.interactionsEnabled;\n      }\n\n      if (this.parent) {\n        return this.parent.interactionsEnabled;\n      }\n\n      return true;\n    },\n\n    /**\r\n     * Setting this to `false` will effectively disable all interactivity on the\r\n     * element.\r\n     *\r\n     * @param value  Is interaction enabled for this element?\r\n     */\n    set: function set(value) {\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"interactionsEnabled\", value)) {\n        var pointerEvents = null; // must be null, not \"null\"!\n\n        if (!value) {\n          pointerEvents = \"none\";\n        } else {\n          // this is for IE\n          this.group.node.style.pointerEvents = \"\";\n        }\n\n        this.group.node.style.pointerEvents = pointerEvents;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"exporting\", {\n    /**\r\n     * @return Export instance\r\n     */\n    get: function get() {\n      return this.getExporting();\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * EXPORT-RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * An [[Export]] instance.\r\n     *\r\n     * Used to access API of the chart export functionality.\r\n     *\r\n     * If `exporting` is not set, the element inherits [[Export]] instance from\r\n     * its parents.\r\n     *\r\n     * Upon request, if no parent has such instance, a new one is created, using\r\n     * default settings, what in most cases is just enough.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/exporting/} for more info about exporting\r\n     * @param exp  Export\r\n     */\n    set: function set(exp) {\n      this._exporting.set(exp, exp);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * This is here as a method so that inheriting classes could override it.\r\n   *\r\n   * @return Export instance\r\n   */\n\n  Sprite.prototype.getExporting = function () {\n    var _export = this._exporting.get();\n\n    if (_export) {\n      return _export;\n    } else {\n      if (this.isStandaloneInstance || !this.parent) {\n        _export = new Export(this.svgContainer.SVGContainer);\n        _export.sprite = this;\n        _export.language = this.language;\n        _export.numberFormatter = this.numberFormatter;\n        _export.dateFormatter = this.dateFormatter;\n        _export.durationFormatter = this.durationFormatter;\n\n        this._exporting.set(_export, _export);\n      } else {\n        return this.parent.exporting;\n      }\n    }\n\n    return _export;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"exportable\", {\n    /**\r\n     * @return Export?\r\n     */\n    get: function get() {\n      return this._exportable;\n      /*const svgContainer = this.svgContainer;\r\n      return !svgContainer || $array.indexOf(svgContainer.nonExportableSprites, this) == -1;*/\n    },\n\n    /**\r\n     * If set to `false` this element will be omitted when exporting the chart\r\n     * to an image.\r\n     *\r\n     * @default true\r\n     * @param value  Export?\r\n     */\n    set: function set(value) {\n      var svgContainer = this.svgContainer;\n      this._exportable = value;\n\n      if (svgContainer) {\n        if (value) {\n          $array.remove(svgContainer.nonExportableSprites, this);\n        } else if ($array.indexOf(svgContainer.nonExportableSprites, this) == -1) {\n          svgContainer.nonExportableSprites.push(this);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * ==========================================================================\r\n   * MODAL/POPUP RELATED STUFF\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Private method to be used for \"classPrefix\" adapter for modals/popups.\r\n   *\r\n   * @param value  Prefix\r\n   */\n\n  Sprite.prototype.modalPrefix = function (value) {\n    value = options.classNamePrefix + value;\n    return value;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"modal\", {\n    /**\r\n     * Returns a [[Modal]] instance, associated with this chart.\r\n     * (elements top parent)\r\n     *\r\n     * Accessing modal does not make it appear. To make a modal appear, use\r\n     * `showModal()` method.\r\n     *\r\n     * @see {@link Modal} for more information about using Modal windows\r\n     * @return Modal instance\r\n     */\n    get: function get() {\n      var svgContainer = this.svgContainer;\n\n      if (svgContainer) {\n        var modal = svgContainer.modal;\n\n        if (!modal.adapter.has(\"classPrefix\", this.modalPrefix)) {\n          modal.adapter.add(\"classPrefix\", this.modalPrefix);\n        }\n\n        return modal;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Opens a modal window with specific content (`text` parameter) and,\r\n   * optionally, `title`.\r\n   *\r\n   * The `text` parameter can contain HTML content.\r\n   *\r\n   * @see {@link Modal} for more information about using Modal windows\r\n   * @param text   Modal contents\r\n   * @param title  Title for the modal window\r\n   */\n\n  Sprite.prototype.openModal = function (text, title) {\n    var svgContainer = this.svgContainer;\n\n    if (svgContainer) {\n      return svgContainer.openModal(text, title);\n    }\n  };\n  /**\r\n   * Hides modal window if there is one currently open.\r\n   */\n\n\n  Sprite.prototype.closeModal = function () {\n    var svgContainer = this.svgContainer;\n\n    if (svgContainer) {\n      svgContainer.closeModal();\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"popups\", {\n    /**\r\n     * A list of popups for this chart.\r\n     *\r\n     * @return Popups\r\n     */\n    get: function get() {\n      var svgContainer = this.svgContainer;\n\n      if (svgContainer) {\n        var popups = svgContainer.popups;\n        popups.template.sprite = this;\n\n        if (!popups.template.adapter.has(\"classPrefix\", this.modalPrefix)) {\n          popups.template.adapter.add(\"classPrefix\", this.modalPrefix);\n        }\n\n        return popups;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates, opens, and returns a new [[Popup]] window.\r\n   *\r\n   * `text` can be any valid HTML.\r\n   *\r\n   * `title` is currently not supported.\r\n   *\r\n   * @param text   Popup contents\r\n   * @param title  Popup title\r\n   * @return Popup instance\r\n   */\n\n  Sprite.prototype.openPopup = function (text, title) {\n    var svgContainer = this.svgContainer;\n\n    if (svgContainer) {\n      return svgContainer.openPopup(text, title);\n    }\n  };\n  /**\r\n   * Closes all currently open popup windows\r\n   */\n\n\n  Sprite.prototype.closeAllPopups = function () {\n    var svgContainer = this.svgContainer;\n\n    if (svgContainer) {\n      svgContainer.closeAllPopups();\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"x\", {\n    /**\r\n     * @return X coordinate\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"x\");\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * POSITIONAL PROPERTIES AND RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Element's absolute or relative X coordinate.\r\n     *\r\n     * If setting both X and Y, please consider using `moveTo()` method instead,\r\n     * as it will be faster to set both coordinates at once.\r\n     *\r\n     * @param value X coordinate\r\n     */\n    set: function set(value) {\n      if (!this.isDragged) {\n        this.setPercentProperty(\"x\", value, false, true, this._positionPrecision, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelX\", {\n    /**\r\n     * Returns element's current absolute X coordinate in pixels.\r\n     *\r\n     * @readonly\r\n     * @return X coordinate (px)\r\n     */\n    get: function get() {\n      var value = $math.fitToRange(this.getPixelX(this.x), this.minX, this.maxX);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelX\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeX\", {\n    /**\r\n     * Returns element's current relative X coordinate in [[Percent]].\r\n     *\r\n     * @return X coordinate ([[Percent]])\r\n     */\n    get: function get() {\n      if (!this._adapterO) {\n        return this.getRelativeX(this.x);\n      } else {\n        return this._adapterO.apply(\"relativeX\", this.getRelativeX(this.x));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"minX\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Min X (px)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"minX\");\n    },\n\n    /**\r\n     * The smallest allowable absolute X coordinate for this element.\r\n     *\r\n     * This is used to contain element movement within certain boundaries.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Min X (px)\r\n     */\n    set: function set(value) {\n      if ($type.isNumber(value)) {\n        value = $math.round(value, this._positionPrecision, true);\n        this.setPropertyValue(\"minX\", value, false, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"maxX\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Max X (px)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"maxX\");\n    },\n\n    /**\r\n     * The biggest allowable absolute X coordinate for this element.\r\n     *\r\n     * This is used to contain element movement within certain boundaries.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Max X (px)\r\n     */\n    set: function set(value) {\n      if ($type.isNumber(value)) {\n        value = $math.round(value, this._positionPrecision, true);\n        this.setPropertyValue(\"maxX\", value, false, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"y\", {\n    /**\r\n     * @return Y coordinate\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"y\");\n    },\n\n    /**\r\n     * Element's absolute or relative Y coordinate.\r\n     *\r\n     * If setting both X and Y, please consider using `moveTo()` method instead,\r\n     * as it will be faster to set both coordinates at once.\r\n     *\r\n     * @param value  Y coordinate\r\n     */\n    set: function set(value) {\n      if (!this.isDragged) {\n        this.setPercentProperty(\"y\", value, false, true, this._positionPrecision, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelY\", {\n    /**\r\n     * Returns element's current absolute Y coordinate in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Y coordinate (px)\r\n     */\n    get: function get() {\n      var value = $math.fitToRange(this.getPixelY(this.y), this.minY, this.maxY);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelY\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeY\", {\n    /**\r\n     * Returns element's current relative Y coordinate in [[Percent]].\r\n     *\r\n     * @readonly\r\n     * @return Y coordinate ([[Percent]])\r\n     */\n    get: function get() {\n      if (!this._adapterO) {\n        return this.getRelativeX(this.y);\n      } else {\n        return this._adapterO.apply(\"relativeY\", this.getRelativeX(this.y));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"minY\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Min Y (px)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"minY\");\n    },\n\n    /**\r\n     * The smallest allowable absolute Y coordinate for this element.\r\n     *\r\n     * This is used to contain element movement within certain boundaries.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Min Y (px)\r\n     */\n    set: function set(value) {\n      if ($type.isNumber(value)) {\n        value = $math.round(value, this._positionPrecision, true);\n        this.setPropertyValue(\"minY\", value, false, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"maxY\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Max Y (px)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"maxY\");\n    },\n\n    /**\r\n     * The biggest allowable absolute Y coordinate for this element.\r\n     *\r\n     * This is used to contain element movement within certain boundaries.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Max Y (px)\r\n     */\n    set: function set(value) {\n      if ($type.isNumber(value)) {\n        value = $math.round(value, this._positionPrecision, true);\n        this.setPropertyValue(\"maxY\", value, false, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"dx\", {\n    /**\r\n     * @return Horizontal offset (px)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"dx\");\n    },\n\n    /**\r\n     * A horizontal offset for the element in pixels.\r\n     *\r\n     * Can be negative value for offset to the left.\r\n     *\r\n     * @param value  Horizontal offset (px)\r\n     */\n    set: function set(value) {\n      if ($type.isNumber(value)) {\n        value = $math.round(value, this._positionPrecision, true);\n        this.setPropertyValue(\"dx\", value, false, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"dy\", {\n    /**\r\n     * @return Vertical offset (px)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"dy\");\n    },\n\n    /**\r\n     * A vertical offset for the element in pixels.\r\n     *\r\n     * Can be negative value for offset upwards.\r\n     *\r\n     * @param value  Vertical offset (px)\r\n     */\n    set: function set(value) {\n      if ($type.isNumber(value)) {\n        value = $math.round(value, this._positionPrecision, true);\n        this.setPropertyValue(\"dy\", value, false, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"rotation\", {\n    /**\r\n     * @return Rotation (0-360)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"rotation\");\n    },\n\n    /**\r\n     * Rotation of the element in degrees. (0-360)\r\n     *\r\n     * Note: For convenience purposes, negative values (for counter-clockwise\r\n     * rotation) and values exceeding 360 can also be used.\r\n     *\r\n     * @param value  Rotation (0-360)\r\n     */\n    set: function set(value) {\n      value = $type.toNumber(value);\n\n      if (!$type.isNumber(value)) {\n        value = 0;\n      }\n\n      this.setPropertyValue(\"rotation\", value, false, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"align\", {\n    /**\r\n     * @return Horizontal align\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"align\");\n    },\n\n    /**\r\n     * Controls horizontal alignment of the element.\r\n     *\r\n     * This is used by parent [[Container]] when layouting its children.\r\n     *\r\n     * @param value  Horizontal align\r\n     */\n    set: function set(value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"align\", value)) {\n        if (this.parent) {\n          this.parent.invalidateLayout();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"valign\", {\n    /**\r\n     * @return Vertical align\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"valign\");\n    },\n\n    /**\r\n     * Controls vertical alignment of the element.\r\n     *\r\n     * This is used by parent [[Container]] when layouting its children.\r\n     *\r\n     * @param value  Vertical align\r\n     */\n    set: function set(value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"valign\", value)) {\n        if (this.parent) {\n          this.parent.invalidateLayout();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"horizontalCenter\", {\n    /**\r\n     * @return Horizontal center\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"horizontalCenter\");\n    },\n\n    /**\r\n     * Controls which part of the element to treat as a horizontal center.\r\n     *\r\n     * The setting will be used when positioning, resizing and rotating the\r\n     * element.\r\n     *\r\n     * @param value  Horizontal center\r\n     */\n    set: function set(value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"horizontalCenter\", value)) {\n        this.updateCenter();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"verticalCenter\", {\n    /**\r\n     * @return Vertical center\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"verticalCenter\");\n    },\n\n    /**\r\n     * Controls which part of the element to treat as a vertical center.\r\n     *\r\n     * The setting will be used when positioning, resizing and rotating the\r\n     * element.\r\n     *\r\n     * @param value  Vertical center\r\n     */\n    set: function set(value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"verticalCenter\", value)) {\n        this.updateCenter();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"maxWidth\", {\n    /**\r\n     * @return Maximum width (px)\r\n     */\n    get: function get() {\n      var maxWidth = this.getPropertyValue(\"maxWidth\");\n\n      if (!$type.isNumber(maxWidth)) {\n        if (this.parent) {\n          var parentWidth = this.parent.maxWidth;\n\n          if (this.parent.layout != \"absolute\" && this.align != \"none\" && this.align != undefined) {\n            parentWidth = parentWidth - this.pixelMarginLeft - this.pixelMarginRight;\n          }\n\n          return parentWidth;\n        }\n      }\n\n      return maxWidth;\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * DIMENSIONAL PROPERTIES AND RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Maximum allowed width for the element in pixels.\r\n     *\r\n     * @param value  Maximum width (px)\r\n     */\n    set: function set(value) {\n      this.setMaxWidth(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Sprite.prototype.setMaxWidth = function (value) {\n    var prevWidth = this.maxWidth;\n    var prevHeight = this.maxHeight;\n\n    if (this.setPropertyValue(\"maxWidth\", value)) {\n      if ($type.isNumber(this.relativeWidth)) {\n        this.invalidate();\n      }\n\n      var event_2 = {\n        type: \"maxsizechanged\",\n        target: this,\n        previousWidth: prevWidth,\n        previousHeight: prevHeight\n      };\n      this.dispatchImmediately(\"maxsizechanged\", event_2);\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"maxHeight\", {\n    /**\r\n     * @return Maximum height (px)\r\n     */\n    get: function get() {\n      var maxHeight = this.getPropertyValue(\"maxHeight\");\n\n      if (!$type.isNumber(maxHeight)) {\n        if (this.parent) {\n          var parentHeight = this.parent.maxHeight;\n\n          if (this.parent.layout != \"absolute\" && this.valign != \"none\" && this.valign != undefined) {\n            parentHeight = parentHeight - this.pixelMarginTop - this.pixelMarginBottom;\n          }\n\n          return parentHeight;\n        }\n      }\n\n      return maxHeight;\n    },\n\n    /**\r\n     * Maximum allowed height for the element in pixels.\r\n     *\r\n     * @param value  Maximum height (px)\r\n     */\n    set: function set(value) {\n      this.setMaxHeight(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Sprite.prototype.setMaxHeight = function (value) {\n    var prevWidth = this.maxWidth;\n    var prevHeight = this.maxHeight;\n\n    if (this.setPropertyValue(\"maxHeight\", value)) {\n      if ($type.isNumber(this.relativeHeight)) {\n        this.invalidate();\n      }\n\n      var event_3 = {\n        type: \"maxsizechanged\",\n        target: this,\n        previousWidth: prevWidth,\n        previousHeight: prevHeight\n      };\n      this.dispatchImmediately(\"maxsizechanged\", event_3);\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"minWidth\", {\n    /**\r\n     * @return Minimum width (px)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"minWidth\");\n    },\n\n    /**\r\n     * Minimum width of the element in pixels.\r\n     *\r\n     * Set to `undefined` to remove the limit.\r\n     *\r\n     * @param value  Minimum width (px)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"minWidth\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"minHeight\", {\n    /**\r\n     * @return Minimum height (px)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"minHeight\");\n    },\n\n    /**\r\n     * Minimum height for the element in pixels.\r\n     *\r\n     * Set to `undefined` to remove the limit.\r\n     *\r\n     * @param value  Minimum height (px)\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"minHeight\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"width\", {\n    /**\r\n     * @return Width (absolute or relative)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"width\");\n    },\n\n    /**\r\n     * Element's absolute or relative width.\r\n     *\r\n     * The width can either be absolute, set in numeric pixels, or relative, set\r\n     * in [[Percent]].\r\n     *\r\n     * Relative width will be calculated using closest measured ancestor\r\n     * [[Container]].\r\n     *\r\n     * @param value  Width (numeric in pixels or relative)\r\n     */\n    set: function set(value) {\n      var changed = this.setPercentProperty(\"width\", value, true, false, this._positionPrecision, true);\n\n      if (changed) {\n        this.percentWidth = undefined;\n        this.relativeWidth = undefined;\n\n        if (value instanceof Percent) {\n          this.percentWidth = value.percent;\n\n          if ($type.isNumber(this._pixelWidth)) {\n            this.maxWidth = undefined;\n          }\n\n          this._pixelWidth = undefined;\n        } else {\n          this._pixelWidth = Number(value); //this._measuredWidth = this._pixelWidth;\n\n          this.maxWidth = this._pixelWidth;\n        }\n\n        this.invalidatePosition();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"height\", {\n    /**\r\n     * @return height (absolute or relative)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"height\");\n    },\n\n    /**\r\n     * Element's absolute or relative height.\r\n     *\r\n     * The height can either be absolute, set in numeric pixels, or relative, set\r\n     * in [[Percent]].\r\n     *\r\n     * Relative height will be calculated using closest measured ancestor\r\n     * [[Container]].\r\n     *\r\n     * @param value  Height (numeric in pixels or relative)\r\n     */\n    set: function set(value) {\n      var changed = this.setPercentProperty(\"height\", value, true, false, this._positionPrecision, true);\n\n      if (changed) {\n        this.percentHeight = undefined;\n        this._relativeHeight = undefined;\n\n        if (value instanceof Percent) {\n          this.percentHeight = value.percent;\n\n          if ($type.isNumber(this._pixelHeight)) {\n            this.maxHeight = undefined;\n          }\n\n          this._pixelHeight = undefined;\n        } else {\n          this._pixelHeight = Number(value); //this._measuredHeight = this._pixelHeight;\n\n          this.maxHeight = this._pixelHeight; // yes, we reset maxWidth\n        }\n\n        this.invalidatePosition();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelWidth\", {\n    /**\r\n     * Returns element's width in pixels, if width was set. For actual width use measuredWidth property.\r\n     *\r\n     * @readonly\r\n     * @return Width (px)\r\n     */\n    get: function get() {\n      var width;\n\n      if ($type.isNumber(this.percentWidth)) {\n        width = this.maxWidth;\n      } else if ($type.isNumber(this._pixelWidth)) {\n        width = this._pixelWidth;\n      } else {\n        width = 0;\n      }\n\n      var minWidth = this.minWidth;\n\n      if (minWidth != null && width < minWidth) {\n        width = minWidth;\n      }\n\n      var value = $math.round(width, this._positionPrecision, true);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelWidth\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelHeight\", {\n    /**\r\n     * Returns element's height in pixels. For actual height use measuredHeight property.\r\n     *\r\n     * @readonly\r\n     * @return Height (px)\r\n     */\n    get: function get() {\n      var height;\n\n      if ($type.isNumber(this.percentHeight)) {\n        height = this.maxHeight;\n      } else if ($type.isNumber(this._pixelHeight)) {\n        height = this._pixelHeight;\n      } else {\n        height = 0; //this._measuredHeightSelf;\n      }\n\n      var minHeight = this.minHeight;\n\n      if (minHeight != null && height < minHeight) {\n        height = minHeight;\n      }\n\n      var value = $math.round(height, this._positionPrecision, true);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelHeight\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeWidth\", {\n    /**\r\n     * @return Relative width\r\n     * @ignore\r\n     */\n    get: function get() {\n      var relativeWidth = this._relativeWidth;\n\n      if ($type.isNumber(relativeWidth)) {\n        if (!this._adapterO) {\n          return relativeWidth;\n        } else {\n          return this._adapterO.apply(\"relativeWidth\", relativeWidth);\n        }\n      }\n    },\n\n    /**\r\n     * Element's relative width in [[Percent]].\r\n     * @ignore\r\n     *\r\n     * @param value  Relative width\r\n     */\n    set: function set(value) {\n      if (this._relativeWidth != value) {\n        this._relativeWidth = value; //\t\t\tthis.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeHeight\", {\n    /**\r\n     * @return Relative height\r\n     * @ignore\r\n     */\n    get: function get() {\n      var relativeHeight = this._relativeHeight;\n\n      if ($type.isNumber(relativeHeight)) {\n        if (!this._adapterO) {\n          return relativeHeight;\n        } else {\n          return this._adapterO.apply(\"relativeHeight\", relativeHeight);\n        }\n      }\n    },\n\n    /**\r\n     * Element's relative height in [[Percent]].\r\n     *\r\n     * @param value  Relative height\r\n     * @ignore\r\n     */\n    set: function set(value) {\n      if (this._relativeHeight != value) {\n        this._relativeHeight = value; //\t\t\tthis.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"measuredWidth\", {\n    /**\r\n     * Returns element's measured width in pixels.\r\n     *\r\n     * A measured width is actual width of contents plus `paddingRight` and* `paddingLeft`, relative to sprite parent, meaning that\r\n     * rotation and scale is taken into account.\r\n     *\r\n     * @readonly\r\n     * @return Width (px)\r\n     */\n    get: function get() {\n      if (this.disabled || this.__disabled) {\n        return 0;\n      }\n\n      if (!this._adapterO) {\n        return this._measuredWidth;\n      } else {\n        return this._adapterO.apply(\"measuredWidth\", this._measuredWidth);\n      } // it's not good to fit to min/max range as then rotations and scale won't be taken into account\n      //return this.adapter.apply(\"measuredWidth\", $math.fitToRange(this._measuredWidth, this.minWidth, this.maxWidth));\n\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"measuredHeight\", {\n    /**\r\n     * Returns elements's measured height in pixels.\r\n     *\r\n     * A measured height is actual height of contents plus `paddingTop` and `paddingBottom`, relative to sprite parent, meaning that\r\n     * rotation and scale taken into account.\r\n     *\r\n     * @readonly\r\n     * @return Height (px)\r\n     */\n    get: function get() {\n      if (this.disabled || this.__disabled) {\n        return 0;\n      } // it's not good to fit to min/max range as then rotations and scale won't be taken into account\n      //return this.adapter.apply(\"measuredHeight\", $math.fitToRange(this._measuredHeight, this.minHeight, this.maxHeight));\n\n\n      if (!this._adapterO) {\n        return this._measuredHeight;\n      } else {\n        return this._adapterO.apply(\"measuredHeight\", this._measuredHeight);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"outerWidth\", {\n    /**\r\n     * Returns element's measured width plus its left and right margins in\r\n     * pixels.\r\n     *\r\n     * @readonly\r\n     * @return Outer width (px)\r\n     */\n    get: function get() {\n      var value = this.pixelWidth + this.pixelMarginRight + this.pixelMarginLeft;\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"outerWidth\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"outerHeight\", {\n    /**\r\n     * Returns element's measured height plus its top and bottom margins in\r\n     * pixels.\r\n     *\r\n     * @readonly\r\n     * @return Outer height (px)\r\n     */\n    get: function get() {\n      var value = this.pixelHeight + this.pixelMarginTop + this.pixelMarginBottom;\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"outerHeight\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"innerWidth\", {\n    /**\r\n     * Returns element's measured inner width in pixels.\r\n     *\r\n     * Inner width is actual available space for content, e.g. element's width\r\n     * minus horizontal padding.\r\n     *\r\n     * @readonly\r\n     * @return Inner width (px)\r\n     */\n    get: function get() {\n      var value = Math.max(0, this.pixelWidth - this.pixelPaddingRight - this.pixelPaddingLeft);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"innerWidth\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"innerHeight\", {\n    /**\r\n     * Returns element's measured inner height in pixels.\r\n     *\r\n     * Inner height is actual available space for content, e.g. element's height\r\n     * minus vertical padding.\r\n     *\r\n     * @readonly\r\n     * @return Inner height (px)\r\n     */\n    get: function get() {\n      var value = Math.max(0, this.pixelHeight - this.pixelPaddingTop - this.pixelPaddingBottom);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"innerHeight\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"globalScale\", {\n    /**\r\n     * Returns element's current \"global\" scale.\r\n     *\r\n     * Scale values accumulate over hierarchy of elements.\r\n     *\r\n     * E.g. if a [[Container]] has `scale = 2` and it's child has a `scale = 2`,\r\n     * the child's `globalScale` will be 4. (a multitude of `2 x 2`)\r\n     *\r\n     * @readonly\r\n     * @return Global scale\r\n     */\n    get: function get() {\n      var scale = this.scale;\n\n      if (this.parent) {\n        scale = scale * this.parent.globalScale;\n      }\n\n      if (!this._adapterO) {\n        return scale;\n      } else {\n        return this._adapterO.apply(\"globalScale\", scale);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"scale\", {\n    /**\r\n     * @return Scale (0-1)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"scale\");\n    },\n\n    /**\r\n     * Scale of the element.\r\n     *\r\n     * The scale is set from 0 (element reduced to nothing) to 1 (default size).\r\n     * * 2 will mean element is increased twice.\r\n     * * 0.5 - reduced by 50%.\r\n     *\r\n     * Etc.\r\n     *\r\n     * @param value  Scale (0-1)\r\n     */\n    set: function set(value) {\n      value = $type.toNumber(value);\n\n      if (value < 0) {\n        value = 0;\n      }\n\n      if (value != this.getPropertyValue(\"scale\")) {\n        this.setPropertyValue(\"scale\", value, false, true);\n        this.handleGlobalScale();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets all four margins for the element at once.\r\n   *\r\n   * Margins are set in pixels.\r\n   *\r\n   * @param top     Top margin\r\n   * @param right   Right margin\r\n   * @param bottom  Bottom margin\r\n   * @param left    Left margin\r\n   * @return Current element\r\n   */\n\n  Sprite.prototype.margin = function (top, right, bottom, left) {\n    this.marginTop = top;\n    this.marginRight = right;\n    this.marginBottom = bottom;\n    this.marginLeft = left;\n    return this;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"marginLeft\", {\n    /**\r\n     * @return Margin value\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"marginLeft\");\n    },\n\n    /**\r\n     * Left margin - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Margin value\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"marginLeft\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"marginRight\", {\n    /**\r\n     * @return Margin value\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"marginRight\");\n    },\n\n    /**\r\n     * Right margin - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Margin value\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"marginRight\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"marginTop\", {\n    /**\r\n     * @return Margin value\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"marginTop\");\n    },\n\n    /**\r\n     * Top margin - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Margin value\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"marginTop\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"marginBottom\", {\n    /**\r\n     * @return Margin value\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"marginBottom\");\n    },\n\n    /**\r\n     * Bottom margin - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Margin value\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"marginBottom\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelMarginRight\", {\n    /**\r\n     * Returns current right margin in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Right margin (px)\r\n     */\n    get: function get() {\n      var value = this.getPixelX(this.marginRight);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelMarginRight\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeMarginRight\", {\n    /**\r\n     * Returns current relative right margin.\r\n     *\r\n     * @readonly\r\n     * @return Relative right margin\r\n     */\n    get: function get() {\n      // @todo Maybe use [[Percent]]?\n      var value = this.getRelativeX(this.marginRight);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"relativeMarginRight\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelMarginLeft\", {\n    /**\r\n     * Returns current left margin in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Left margin (px)\r\n     */\n    get: function get() {\n      var value = this.getPixelX(this.marginLeft);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelMarginLeft\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeMarginLeft\", {\n    /**\r\n     * Returns current relative left margin.\r\n     *\r\n     * @readonly\r\n     * @return Relative left margin\r\n     */\n    get: function get() {\n      //@todo Maybe use [[Percent]]?\n      var value = this.getRelativeX(this.marginLeft);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"relativeMarginLeft\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelMarginTop\", {\n    /**\r\n     * Returns current top margin in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Top margin (px)\r\n     */\n    get: function get() {\n      var value = this.getPixelY(this.marginTop);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelMarginTop\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeMarginTop\", {\n    /**\r\n     * Returns current relative top margin.\r\n     *\r\n     * @readonly\r\n     * @return Relative top margin\r\n     */\n    get: function get() {\n      // @todo Maybe use [[Percent]]?\n      var value = this.getRelativeY(this.marginTop);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"relativeMarginTop\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelMarginBottom\", {\n    /**\r\n     * Returns current bottom margin in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Bottom margin (px)\r\n     */\n    get: function get() {\n      var value = this.getPixelY(this.marginBottom);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelMarginBottom\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeMarginBottom\", {\n    /**\r\n     * Returns current relative bottom margin.\r\n     *\r\n     * @readonly\r\n     * @return Relative bottom margin\r\n     */\n    get: function get() {\n      // @todo Maybe use [[Percent]]?\n      var value = this.getRelativeY(this.marginBottom);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"relativeMarginBottom\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets padding for the element in pixels.\r\n   *\r\n   * @param top     Top padding (px)\r\n   * @param right   Right padding (px)\r\n   * @param bottom  Bottom padding (px)\r\n   * @param left    Left padding (px)\r\n   * @return Element\r\n   */\n\n  Sprite.prototype.padding = function (top, right, bottom, left) {\n    this.paddingTop = top;\n    this.paddingRight = right;\n    this.paddingBottom = bottom;\n    this.paddingLeft = left;\n    return this;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"paddingLeft\", {\n    /**\r\n     * @return Padding value\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"paddingLeft\");\n    },\n\n    /**\r\n     * Left padding - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Padding value\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"paddingLeft\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"paddingRight\", {\n    /**\r\n     * @return Padding value\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"paddingRight\");\n    },\n\n    /**\r\n     * Right padding - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Padding value\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"paddingRight\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"paddingTop\", {\n    /**\r\n     * @return Padding value\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"paddingTop\");\n    },\n\n    /**\r\n     * Top padding - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Padding value\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"paddingTop\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"paddingBottom\", {\n    /**\r\n     * @return Padding value\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"paddingBottom\");\n    },\n\n    /**\r\n     * Bottom padding - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Padding value\r\n     */\n    set: function set(value) {\n      this.setPercentProperty(\"paddingBottom\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelPaddingRight\", {\n    /**\r\n     * Returns current right padding in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Right padding (px)\r\n     */\n    get: function get() {\n      return this.getPixelX(this.paddingRight);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativePaddingRight\", {\n    /**\r\n     * Returns current relative right padding.\r\n     *\r\n     * @readonly\r\n     * @return Relative right padding\r\n     */\n    get: function get() {\n      // @todo Maybe use [[Percent]]?\n      return this.getRelativeX(this.paddingRight);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelPaddingLeft\", {\n    /**\r\n     * Returns current left padding in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Left padding (px)\r\n     */\n    get: function get() {\n      return this.getPixelX(this.paddingLeft);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativePaddingLeft\", {\n    /**\r\n     * Returns current relative left padding.\r\n     *\r\n     * @readonly\r\n     * @return Relative left padding\r\n     */\n    get: function get() {\n      // @todo Maybe use [[Percent]]?\n      return this.getRelativeX(this.paddingLeft);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelPaddingTop\", {\n    /**\r\n     * Returns current top padding in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Top padding (px)\r\n     */\n    get: function get() {\n      return this.getPixelY(this.paddingTop);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativePaddingTop\", {\n    /**\r\n     * Returns current relative top padding.\r\n     *\r\n     * @readonly\r\n     * @return Relative top padding\r\n     */\n    get: function get() {\n      // @todo Maybe use [[Percent]]?\n      return this.getRelativeY(this.paddingTop);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelPaddingBottom\", {\n    /**\r\n     * Returns current bottom padding in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Bottom padding (px)\r\n     */\n    get: function get() {\n      return this.getPixelY(this.paddingBottom);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativePaddingBottom\", {\n    /**\r\n     * Returns current relative bottom padding.\r\n     *\r\n     * @readonly\r\n     * @return Relative bottom padding\r\n     */\n    get: function get() {\n      // @todo Maybe use [[Percent]]?\n      return this.getRelativeY(this.paddingBottom);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"path\", {\n    /**\r\n     * @return Path of a Sprite element\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"path\");\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * APPEARANCE-RELATED PROPERTIES AND RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Path of Sprite element\r\n     */\n    set: function set(value) {\n      this.setPath(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Sprite.prototype.setPath = function (value) {\n    if (this.setPropertyValue(\"path\", value)) {\n      if (this._adapterO) {\n        value = this._adapterO.apply(\"path\", value);\n      }\n\n      if (!this._isPath) {\n        if (!this.element || this.element.node && !(this.element.node instanceof SVGPathElement)) {\n          this.element = this.paper.add(\"path\");\n        }\n\n        this._isPath = true;\n      }\n\n      if ($type.hasValue(value)) {\n        this.element.attr({\n          \"d\": value\n        });\n      } else {\n        this.element.removeAttr(\"d\");\n      }\n\n      this.invalidatePosition(); // otherwise is 0x0\n\n      if (!this.inited) {\n        this.events.once(\"inited\", this.validatePosition, this, false);\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"fillModifier\", {\n    /**\r\n     * @return Fill color modifier\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"fillModifier\");\n    },\n\n    /**\r\n     * [[ColorModifier]] that can be used to modify color and pattern of the\r\n     * element's fill, e.g. create gradients.\r\n     *\r\n     * @param value  Fill color modifiier\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"fillModifier\", value)) {\n        this.setFill(this.fill);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"strokeModifier\", {\n    /**\r\n     * @return Stroke color modifier\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"strokeModifier\");\n    },\n\n    /**\r\n     * [[ColorModifier]] that can be used to modify color and pattern of the\r\n     * element's stroke (outline), e.g. create gradients.\r\n     *\r\n     * @param value  Stroke color modifier\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"strokeModifier\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"fillOpacity\", {\n    /**\r\n     * @return Opacity (0-9)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"fillOpacity\");\n    },\n\n    /**\r\n     * Element's fill opacity.\r\n     *\r\n     * Opacity ranges from 0 (fully transparent) to 1 (fully opaque).\r\n     *\r\n     * @param value  Opacity (0-1)\r\n     */\n    set: function set(value) {\n      value = $math.toNumberRange(value, 0, 1);\n\n      if (this.setPropertyValue(\"fillOpacity\", value)) {\n        this.setSVGAttribute({\n          \"fill-opacity\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"fill\", {\n    /**\r\n     * @return Fill\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"fill\");\n    },\n\n    /**\r\n     * Element's fill color or pattern.\r\n     *\r\n     * @param value  Fill\r\n     */\n    set: function set(value) {\n      this.setFill(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets actual `fill` property on the SVG element, including applicable color\r\n   * modifiers.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value  Fill\r\n   */\n\n  Sprite.prototype.setFill = function (value) {\n    if (!$type.isObject(value)) {\n      value = toColor(value);\n    }\n\n    if (this.setColorProperty(\"fill\", value) || this.fillModifier) {\n      // this can not go into next if, as value is turned to Gradient\n      if (value instanceof Color) {\n        if (this.fillModifier) {\n          value = this.fillModifier.modify(value);\n        }\n      }\n\n      this.realFill = value; // todo: review this place when some Color type will be added\n\n      if (value instanceof Color) {\n        this.setSVGAttribute({\n          \"fill\": value.toString()\n        });\n      } else if (!$type.hasValue(value)) {\n        this.removeSVGAttribute(\"fill\");\n      } else if (value instanceof Pattern || value instanceof LinearGradient || value instanceof RadialGradient) {\n        var fill = value;\n        fill.paper = this.paper;\n        this.setSVGAttribute({\n          \"fill\": \"url(\\\"\" + $utils.getBaseURI() + fill.id + \"\\\")\"\n        });\n      }\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"opacity\", {\n    /**\r\n     * @return Opacity (0-1)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"opacity\");\n    },\n\n    /**\r\n     * Element's opacity.\r\n     *\r\n     * Opacity setting can range from 0 (fully transparent) to 1 (fully opaque).\r\n     *\r\n     * ATTENTION: It is highly not recommended to use `opacity` directly on the\r\n     * element. The charts use `opacity` to hide/show elements, so your setting\r\n     * might be lost if element is hidden and then later shown.\r\n     *\r\n     * Instead use methods `hide()` and `show()` to completely toggle off and on\r\n     * the element.\r\n     *\r\n     * Or, use properties `fillOpacity` and `strokeOpacity`, if you need to make\r\n     * the element semi-transparent.\r\n     *\r\n     * @param value Opacity (0-1)\r\n     */\n    set: function set(value) {\n      value = $math.toNumberRange(value, 0, 1);\n\n      if (this.setPropertyValue(\"opacity\", value)) {\n        this.setSVGAttribute({\n          \"opacity\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"stroke\", {\n    /**\r\n     * @return Stroke setting\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"stroke\");\n    },\n\n    /**\r\n     * Element's stroke (outline) color or pattern.\r\n     *\r\n     * @param value  Stroke setting\r\n     */\n    set: function set(value) {\n      this.setStroke(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets actual `stroke` property on the SVG element, including applicable\r\n   * color modifiers.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value Stroke setting\r\n   */\n\n  Sprite.prototype.setStroke = function (value) {\n    if (!$type.isObject(value)) {\n      value = toColor(value);\n    }\n\n    if (this.setColorProperty(\"stroke\", value) || this.strokeModifier) {\n      // this can not go into next if, as value is turned to Gradient\n      if (value instanceof Color) {\n        if (this.strokeModifier) {\n          value = this.strokeModifier.modify(value);\n        }\n      }\n\n      this.realStroke = value;\n\n      if (value instanceof Color) {\n        if (value.hex == \"none\") {\n          this.removeSVGAttribute(\"stroke\");\n        } else {\n          this.setSVGAttribute({\n            \"stroke\": value.toString()\n          });\n        }\n      } else if (!$type.hasValue(value)) {\n        this.removeSVGAttribute(\"stroke\");\n      } else if (value instanceof Pattern || value instanceof LinearGradient || value instanceof RadialGradient) {\n        var stroke = value;\n        stroke.paper = this.paper;\n        this.setSVGAttribute({\n          \"stroke\": \"url(\\\"\" + $utils.getBaseURI() + stroke.id + \"\\\")\"\n        });\n      }\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"strokeOpacity\", {\n    /**\r\n     * @return Opacity (0-1)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"strokeOpacity\");\n    },\n\n    /**\r\n     * Stroke (outline) opacity.\r\n     *\r\n     * The values may range from 0 (fully transparent) to 1 (fully opaque).\r\n     *\r\n     * @param value  Opacity (0-1)\r\n     */\n    set: function set(value) {\n      value = $math.toNumberRange(value, 0, 1);\n\n      if (this.setPropertyValue(\"strokeOpacity\", value)) {\n        this.setSVGAttribute({\n          \"stroke-opacity\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"nonScalingStroke\", {\n    /**\r\n     * @return Do not scale stroke (outline)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"nonScalingStroke\");\n    },\n\n    /**\r\n     * Controls if the element's stroke (outline) should remain keep constant\r\n     * thicnkess and do not scale when the whole element is resized.\r\n     *\r\n     * @param value  Do not scale stroke (outline)\r\n     */\n    set: function set(value) {\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"nonScalingStroke\", value)) {\n        this.strokeWidth = this.strokeWidth;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"nonScaling\", {\n    /**\r\n     * @return Is element scaleable?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"nonScaling\");\n    },\n\n    /**\r\n     * Controls if element should keep constant size and not scale even if there is\r\n     * space available, or it does not fit.\r\n     *\r\n     * @param value  Is element scaleable?\r\n     */\n    set: function set(value) {\n      // @todo Description (review)\n      value = $type.toBoolean(value);\n      this.setPropertyValue(\"nonScaling\", value, false, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"strokeWidth\", {\n    /**\r\n     * @return Thickness (px)\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"strokeWidth\");\n    },\n\n    /**\r\n     * Stroke (outline) thickness in pixels.\r\n     *\r\n     * @param value  Thickness (px)\r\n     */\n    set: function set(value) {\n      value = $type.toNumber(value);\n      this.setPropertyValue(\"strokeWidth\", value, true);\n\n      if (this.nonScalingStroke) {\n        if (!$type.isNumber(value)) {\n          value = 1;\n        }\n\n        value = value / this.globalScale;\n      }\n\n      this.setSVGAttribute({\n        \"stroke-width\": value\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"strokeDasharray\", {\n    /**\r\n     * @return `stroke-dasharray`\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"strokeDasharray\");\n    },\n\n    /**\r\n     * A `stroke-dasharray` for the stroke (outline).\r\n     *\r\n     * \"Dasharray\" allows setting rules to make lines dashed, dotted, etc.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray} for more info on `stroke-dasharray`\r\n     * @param value  `stroke-dasharray`\r\n     */\n    set: function set(value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"strokeDasharray\", value)) {\n        this.setSVGAttribute({\n          \"stroke-dasharray\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"strokeDashoffset\", {\n    /**\r\n     * @return `stroke-dashoffset`\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"strokeDashoffset\");\n    },\n\n    /**\r\n     * A `stroke-dashoffset` for the stroke (outline).\r\n     *\r\n     * \"Dashoffset\" allows setting the start position of the dashes if\r\n     * `strokeDasharray` is used.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dashoffset} for more info on `stroke-dashoffset`\r\n     * @param value  `stroke-dashoffset`\r\n     */\n    set: function set(value) {\n      value = $type.toNumber(value);\n\n      if (this.setPropertyValue(\"strokeDashoffset\", value)) {\n        this.setSVGAttribute({\n          \"stroke-dashoffset\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"strokeLinecap\", {\n    /**\r\n     * @return `stroke-linecap`\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"strokeLinecap\");\n    },\n\n    /**\r\n     * A `stroke-linecap` to indicate how line ends are drawn.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Fills_and_Strokes#Stroke} for more info on `stroke-linecap`\r\n     * @param value  `stroke-linecap`\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"strokeLinecap\", value)) {\n        this.setSVGAttribute({\n          \"stroke-linecap\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"strokeLinejoin\", {\n    /**\r\n     * @return `stroke-linejoin`\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"strokeLinejoin\");\n    },\n\n    /**\r\n     * A `stroke-linejoin` to indicate how line ends are drawn.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Fills_and_Strokes#Stroke} for more info on `stroke-linejoin`\r\n     * @param value  `stroke-linejoin`\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"strokeLinejoin\", value)) {\n        this.setSVGAttribute({\n          \"stroke-linejoin\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"shapeRendering\", {\n    /**\r\n     * @return 'shape-rendering' value\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"shapeRendering\");\n    },\n\n    /**\r\n     * An SVG-specific `shape-rendering` value.\r\n     *\r\n     * `shape-rendering` controls how vector graphics are drawn and rendered.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering} for more information about `shape-rendering`\r\n     * @default \"auto\"\r\n     * @param value  'shape-rendering' value\r\n     */\n    set: function set(value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"shapeRendering\", value)) {\n        this.setSVGAttribute({\n          \"shape-rendering\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelPerfect\", {\n    /**\r\n     * @return Use pixel perfect?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"pixelPerfect\");\n    },\n\n    /**\r\n     * Controls if SVG vectors should be drawn with \"pixel\" precision, producing\r\n     * perfectly crisp lines on retina displays.\r\n     *\r\n     * Setting this to `true` might improve visual quality, but may have a\r\n     * negative effect on performance.\r\n     *\r\n     * Different elements use different default setting for `pixelPerfect`.\r\n     *\r\n     * We recommend leaving this at their default settings, unless there's a\r\n     * specific need.\r\n     *\r\n     * @param value  Use pixel perfect?\r\n     */\n    set: function set(value) {\n      value = $type.toBoolean(value);\n\n      if (value) {\n        this._positionPrecision = 0;\n      } else {\n        this._positionPrecision = 3;\n      }\n\n      this.setPropertyValue(\"pixelPerfect\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"rtl\", {\n    /**\r\n     * @return RTL?\r\n     */\n    get: function get() {\n      if ($type.hasValue(this._rtl)) {\n        return this._rtl;\n      } else if (this.virtualParent) {\n        return this.virtualParent.rtl;\n      } else if (this.parent) {\n        return this.parent.rtl;\n      } //this.rtl = false;\n\n\n      return false;\n    },\n\n    /**\r\n     * An RTL (right-to-left) setting.\r\n     *\r\n     * RTL may affect alignment, text, and other visual properties.\r\n     *\r\n     * @param value  `true` for to use RTL\r\n     */\n    set: function set(value) {\n      value = $type.toBoolean(value);\n      this._rtl = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * ==========================================================================\r\n   * VISIBILITY AND ORDER PROPERTIES AND RELATED STUFF\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Reveals hidden element.\r\n   *\r\n   * Has no effect if element is already visible.\r\n   *\r\n   * If `duration` is not specified, it will use default.\r\n   *\r\n   * @param duration  Fade in duration (ms)\r\n   * @return Animation object if such object was created\r\n   */\n\n  Sprite.prototype.show = function (duration) {\n    return this.showReal(duration);\n  };\n  /**\r\n   * Performs actual operations to reveal this element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param duration Fade in duration (ms)\r\n   * @return Fade in duration (ms)\r\n   */\n\n\n  Sprite.prototype.showReal = function (duration) {\n    var _this = this;\n\n    if (this.preventShow) {\n      return;\n    }\n\n    var transition;\n    var properties = this.defaultState.properties;\n\n    if (!this.disabled && (this.isHidden || !this.visible || this.isHiding || properties.opacity != null && this.opacity < properties.opacity && !this.isShowing) && !this.isDisposed()) {\n      // helps to avoid flicker, as show might change opacity or visibility but item might be at invalid state/position\n      if (this.invalid) {\n        this.validate();\n      }\n\n      if (this.positionInvalid) {\n        this.validatePosition();\n      }\n\n      if (!$type.isNumber(duration)) {\n        duration = this.defaultState.transitionDuration;\n      }\n\n      if (this._hideAnimation) {\n        this._hideAnimation.kill();\n\n        this._hideAnimation = undefined;\n      } // Cancel hide handler just in case it was there\n\n\n      if (this._showHideDisposer) {\n        this.removeDispose(this._showHideDisposer);\n      }\n\n      this._isHidden = false;\n      this.isHiding = false;\n      this.isShowing = true; // Apply current state\n\n      transition = this.applyCurrentState(duration);\n\n      if (transition && !transition.isFinished()) {\n        this._showHideDisposer = transition.events.on(\"animationended\", function () {\n          _this.isShowing = false;\n        });\n\n        this._disposers.push(this._showHideDisposer);\n      } else {\n        this.isShowing = false;\n      } // Make it visible\n\n\n      var visible = this.defaultState.properties.visible;\n\n      if (!$type.hasValue(visible)) {\n        visible = true;\n      }\n\n      this.visible = visible; // Unhide from screen readers\n\n      this.readerHidden = false; // Dispatch \"show\" event\n\n      this.dispatchImmediately(\"shown\");\n    }\n\n    return transition;\n  };\n  /**\r\n   * Initiates hiding of Sprite.\r\n   * When called it will fade out the the Sprite to transparency, then make it\r\n   * invisible.\r\n   * @param duration Duration in millisecons\r\n   */\n\n  /**\r\n   * Hides the element, by applying `hidden` state.\r\n   *\r\n   * Has no effect if element is already hidden.\r\n   *\r\n   * If `duration` is not specified, it will use default.\r\n   *\r\n   * While element is fading out, its `isHiding` property will resolve to\r\n   * `true`.\r\n   *\r\n   * When element is hidden, its `visible` property will resolve to `false`.\r\n   *\r\n   * @param duration  Fade out duration (ms)\r\n   * @return hide Animation object if such object was created\r\n   */\n\n\n  Sprite.prototype.hide = function (duration) {\n    return this.hideReal(duration);\n  };\n  /**\r\n   * Hides actual SVG elements and handles hiding animations.\r\n   *\r\n   * @param duration  Fade out duration (ms)\r\n   * @return Fade out duration (ms)\r\n   * @ignore\r\n   */\n\n\n  Sprite.prototype.hideReal = function (duration) {\n    var _this = this;\n\n    var transition;\n\n    if (!this.isHiding && this.visible && !this.isDisposed()) {\n      // added to solve 51375\n      if (this.tooltip && this.tooltip.currentSprite == this) {\n        this.hideTooltip(0);\n      }\n\n      if (this._hideAnimation) {\n        this._hideAnimation.kill();\n\n        this._hideAnimation = undefined;\n      }\n\n      this.isShowing = false; // Cancel hide handler just in case it was there\n\n      if (this._showHideDisposer) {\n        this.removeDispose(this._showHideDisposer);\n      } // Get state\n\n\n      var hiddenState = this.hiddenState; // Transition to \"hidden\" state, provided Sprite has one set\n\n      if (hiddenState) {\n        // Yes, we have a \"hidden\" state\n        // `setState` will return an `Animation` object which we can set\n        // events on\n        transition = this.setState(hiddenState, duration, undefined);\n\n        if (transition && !transition.isFinished()) {\n          this._hideAnimation = transition;\n          this._showHideDisposer = transition.events.on(\"animationended\", function () {\n            _this.isHiding = false;\n            _this._isHidden = true;\n          }, this);\n\n          this._disposers.push(this._showHideDisposer); // Thrown everything into `_disposers` just in case Sprite gets\n          // destroyed in the meantime\n\n\n          this._disposers.push(transition);\n        } else {\n          this.isHiding = false;\n          this._isHidden = true;\n        }\n      } else {\n        // No hidden state, let's just set `visible` and call it a day\n        this.visible = false;\n        this.isHiding = false;\n        this._isHidden = true;\n      } // Hide from screen readers\n\n\n      this.readerHidden = true; // Dispach \"hidden\" event\n\n      this.dispatchImmediately(\"hidden\");\n      this.invalidate(); // hide it at once to avoid flickers // validate() causes SO\n    }\n\n    if (!$type.isNumber(duration)) {\n      duration = this.hiddenState.transitionDuration;\n    }\n\n    return transition;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"visible\", {\n    /**\r\n     * Returns current visibility of the element.\r\n     *\r\n     * @return Visible?\r\n     */\n    get: function get() {\n      return this.getVisibility();\n    },\n\n    /**\r\n     * Sets visibility of the element.\r\n     *\r\n     * @param value Visible?\r\n     */\n    set: function set(value) {\n      value = $type.toBoolean(value);\n      this.setVisibility(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns visibility value\r\n   * @ignore\r\n   */\n\n  Sprite.prototype.getVisibility = function () {\n    var value = this.getPropertyValue(\"visible\");\n\n    if (!$type.hasValue(value)) {\n      value = true;\n    }\n\n    return value;\n  };\n  /**\r\n   * Sets `visibility` property:\r\n   *\r\n   * * `true` - visible\r\n   * * `false` - hidden\r\n   *\r\n   * @param value  true - visible, false - hidden\r\n   * @return Current visibility\r\n   */\n\n\n  Sprite.prototype.setVisibility = function (value) {\n    if (this.setPropertyValue(\"visible\", value)) {\n      if (value) {\n        this.group.removeAttr(\"visibility\");\n      } else {\n        this.group.attr({\n          \"visibility\": \"hidden\"\n        });\n      } //this.invalidatePosition();\n\n\n      if (this.events.isEnabled(\"visibilitychanged\")) {\n        var event_4 = {\n          type: \"visibilitychanged\",\n          target: this,\n          visible: value\n        };\n        this.events.dispatchImmediately(\"visibilitychanged\", event_4);\n      }\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"zIndex\", {\n    /**\r\n     * @return zIndex\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"zIndex\");\n    },\n\n    /**\r\n     * A \"zIndex\" of the element.\r\n     *\r\n     * \"zIndex\" determines the order of how elements are placed over each other.\r\n     *\r\n     * Higher \"zIndex\" will mean the element will be draw on top of elements\r\n     * with lower \"zIndexes\".\r\n     *\r\n     * @param value  zIndex\r\n     */\n    set: function set(value) {\n      value = $type.toNumber(value);\n\n      if (this.setPropertyValue(\"zIndex\", value)) {\n        this.dispatch(\"zIndexChanged\");\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Moves the element to the very top in element order, so that it appears\r\n   * in front of other elements.\r\n   */\n\n  Sprite.prototype.toFront = function () {\n    var parent = this.parent;\n\n    if (parent && parent.children.indexOf(this) != parent.children.length - 1) {\n      parent.children.moveValue(this, parent.children.length - 1);\n      this.dispatch(\"zIndexChanged\");\n    }\n  };\n  /**\r\n   * Moves the element to the very bottom in the element order, so that it\r\n   * appears behind other elements.\r\n   */\n\n\n  Sprite.prototype.toBack = function () {\n    var parent = this.parent;\n\n    if (parent && parent.children.indexOf(this) != 0) {\n      parent.children.moveValue(this, 0);\n      this.dispatch(\"zIndexChanged\");\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"tooltip\", {\n    /**\r\n     * @return Tooltip\r\n     */\n    get: function get() {\n      if (this._tooltip) {\n        return this._tooltip;\n      } else if (this.virtualParent) {\n        return this.virtualParent.tooltip;\n      } else if (this.parent) {\n        return this.parent.tooltip;\n      }\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * TOOLTIP-RELATED PROPERTIES STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * A [[Tooltip]] object to be used when displayed rollover information for\r\n     * the element.\r\n     *\r\n     * @param tooltip  Tooltip\r\n     */\n    set: function set(tooltip) {\n      if (this._tooltip) {\n        //this._tooltip.dispose();\n        this.removeDispose(this._tooltip);\n      }\n\n      this._tooltip = tooltip;\n\n      if (tooltip) {\n        tooltip.parent = this.tooltipContainer;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipDataItem\", {\n    /**\r\n     * @return Tooltip data item\r\n     */\n    get: function get() {\n      var tooltipDataItem = this._tooltipDataItem;\n\n      if (tooltipDataItem) {\n        return tooltipDataItem;\n      } else {\n        return this.dataItem;\n      }\n    },\n\n    /**\r\n     * A [[DataItem]] to use when populating content for the element's\r\n     * [[Tooltip]].\r\n     *\r\n     * @see {@link Tooltip}\r\n     * @see {@link DataItem}\r\n     * @param value  Tooltip data item\r\n     */\n    set: function set(value) {\n      // important: do not dispose tooltip dataItem, as it is some actual data item from data!\n      this._tooltipDataItem = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipColorSource\", {\n    /**\r\n     * @return Tooltip color source\r\n     */\n    get: function get() {\n      return this._tooltipColorSource;\n    },\n\n    /**\r\n     * A [[Sprite]] or sprite template to use when getting colors for tooltip. If a template is set,\r\n     * tooltip will look for a clone in tooltipDataItem.sprites. If no clone is found, then template colors will be used.\r\n     *\r\n     * @see {@link Tooltip}\r\n     * @see {@link Sprite}\r\n     * @param sprite Sprite\r\n     */\n    set: function set(sprite) {\n      this._tooltipColorSource = sprite;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Shows the element's [[Tooltip]].\r\n   *\r\n   * A tooltip will be populated using text templates in either `tooltipHTML` or\r\n   * `tooltipText` as well as data in `tooltipDataItem`.\r\n   *\r\n   * @see {@link Tooltip}\r\n   * @param optional point (sprite-related) to which tooltip must point.\r\n   * @return returns true if the tooltip was shown and false if it wasn't (no text was found)\r\n   */\n\n  Sprite.prototype.showTooltip = function (point) {\n    if (this.showTooltipOn == \"always\" && !this._tooltip && this.tooltip) {\n      this._tooltip = this.tooltip.clone();\n    }\n\n    if (!point && this.tooltipPosition == \"pointer\" && this.isHover) {\n      point = $utils.documentPointToSvg(getInteraction().lastPointer.point, this.svgContainer.SVGContainer, this.svgContainer.cssScale);\n    } // do not show if hidden\n\n\n    var sprite = this;\n\n    while (sprite != undefined) {\n      if (!sprite.visible || sprite.disabled || sprite.__disabled) {\n        if (this._tooltip && this._tooltip.visible) {\n          this._tooltip.hide(0);\n        }\n\n        return;\n      }\n\n      sprite = sprite.parent;\n    }\n\n    if ($type.hasValue(this.tooltipText) || $type.hasValue(this.tooltipHTML)) {\n      var tooltip = this.tooltip;\n      var tooltipDataItem = this.tooltipDataItem;\n\n      if (tooltip) {\n        tooltip.targetSprite = this;\n        var colorSource_1 = this;\n        var tooltipColorSource_1 = this.tooltipColorSource;\n\n        if ((tooltip.getStrokeFromObject || tooltip.getFillFromObject) && tooltipColorSource_1) {\n          if (tooltipColorSource_1.isTemplate) {\n            if (tooltipDataItem) {\n              $array.eachContinue(tooltipDataItem.sprites, function (sprite) {\n                if (sprite.clonedFrom == tooltipColorSource_1) {\n                  colorSource_1 = sprite;\n                  return false;\n                }\n\n                return true;\n              });\n            }\n          } else {\n            colorSource_1 = tooltipColorSource_1;\n          }\n        }\n\n        if (tooltip.getStrokeFromObject) {\n          var stroke = this.stroke;\n          var source = colorSource_1;\n\n          while (source.parent != undefined) {\n            stroke = source.stroke;\n\n            if (stroke == undefined) {\n              source = source.parent;\n            }\n\n            if (stroke != undefined) {\n              break;\n            }\n          }\n\n          if (stroke instanceof Color) {\n            tooltip.background.animate({\n              property: \"stroke\",\n              to: stroke\n            }, tooltip.animationDuration);\n          } else {\n            tooltip.background.stroke = stroke;\n          }\n        } // Set data item\n\n\n        tooltip.dataItem = tooltipDataItem;\n        tooltip.label.populateStringFrom = this;\n\n        if (tooltip.getFillFromObject) {\n          var fill = this.fill;\n          var source = colorSource_1;\n\n          while (source.parent != undefined) {\n            fill = source.fill;\n\n            if (fill == undefined || fill instanceof Color && fill.rgb == undefined) {\n              source = source.parent;\n            } else if (fill != undefined) {\n              break;\n            }\n          }\n\n          if (fill == undefined) {\n            fill = color(\"#000000\");\n          }\n\n          if (fill instanceof Color) {\n            if (!tooltip.visible) {\n              tooltip.background.fill = fill;\n            } else {\n              tooltip.background.animate({\n                property: \"fill\",\n                to: fill\n              }, tooltip.animationDuration);\n            }\n          } else {\n            tooltip.background.fill = fill;\n          }\n\n          if (tooltip.autoTextColor && fill instanceof Color) {\n            tooltip.label.fill = fill.alternative;\n          }\n        } // Apply tooltip text\n\n\n        var text = \"\";\n\n        if (this.tooltipHTML) {\n          tooltip.html = this.tooltipHTML;\n          text = this.tooltipHTML;\n        }\n\n        if (this.tooltipText) {\n          tooltip.text = this.tooltipText;\n          text = this.tooltipText;\n        }\n\n        if (this.updateTooltipPosition(point)) {\n          // Set accessibility option\n          tooltip.readerDescribedBy = this.uidAttr(); // make label to render to be able to check currentText\n\n          if (tooltip.label.invalid) {\n            tooltip.label.validate();\n          }\n\n          if (text != undefined && text != \"\" && tooltip.label.currentText != \"\") {\n            //@todo: think of how to solve this better\n            if (tooltip && !tooltip.parent) {\n              tooltip.parent = this.tooltipContainer;\n            } // Reveal tooltip\n            // showing it in 1 ms helps to avoid strange flickering in IE\n\n\n            var duration = tooltip.defaultState.transitionDuration;\n\n            if (duration <= 0) {\n              duration = 1;\n            }\n\n            tooltip.show(duration);\n            tooltip.currentSprite = this;\n            return true;\n          } else {\n            this.hideTooltip(0);\n          }\n        } else {\n          this.hideTooltip(0);\n        }\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  Sprite.prototype.updateTooltipPosition = function (point) {\n    var _this = this;\n\n    if (this.tooltipPosition == \"pointer\") {\n      if (this._interactionDisposer) {\n        this._interactionDisposer.dispose();\n      }\n\n      this._interactionDisposer = getInteraction().body.events.on(\"track\", function (ev) {\n        return _this.pointTooltipTo($utils.documentPointToSvg(ev.point, _this.svgContainer.SVGContainer, _this.svgContainer.cssScale), true);\n      });\n\n      if (point) {\n        return this.pointTooltipTo(point, true);\n      }\n    } else {\n      // Point to the X/Y of this Sprite\n      var globalPoint = $utils.spritePointToSvg({\n        \"x\": this.getTooltipX(),\n        \"y\": this.getTooltipY()\n      }, this);\n      return this.pointTooltipTo(globalPoint);\n    }\n  };\n  /**\r\n   * Sets the point the [[Tooltip]] should point to.\r\n   *\r\n   * @param point      Coordinates to point to\r\n   * @param instantly  Move instantly without animation\r\n   */\n\n\n  Sprite.prototype.pointTooltipTo = function (point, instantly) {\n    var tooltip = this.tooltip;\n\n    if (tooltip && this.topParent) {\n      if (tooltip.showInViewport) {\n        tooltip.pointTo(point, instantly);\n        return true;\n      }\n\n      if ($math.isInRectangle(point, {\n        x: 0,\n        y: 0,\n        width: this.topParent.maxWidth,\n        height: this.topParent.maxHeight\n      })) {\n        tooltip.pointTo(point, instantly);\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   * Hides element's [[Tooltip]].\r\n   *\r\n   * @see {@link Tooltip}\r\n   */\n\n\n  Sprite.prototype.hideTooltip = function (duration) {\n    if (this.showTooltipOn == \"always\") {\n      return;\n    }\n\n    var tooltip = this.tooltip;\n\n    if (tooltip) {\n      if (tooltip.targetSprite == this) {\n        tooltip.targetSprite = undefined;\n      }\n\n      tooltip.hide(duration);\n\n      if (this._interactionDisposer) {\n        this._interactionDisposer.dispose();\n\n        this._interactionDisposer = undefined;\n      }\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"tooltipHTML\", {\n    /**\r\n     * @return Tooltip HTML content template\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"tooltipHTML\");\n    },\n\n    /**\r\n     * An HTML template to be used to populate [[Tooltip]] contents.\r\n     *\r\n     * If element has `tooltipDataItem` or `dataItem` set, this will be parsed\r\n     * for any data values to be replaced with the values from respective data\r\n     * items.\r\n     *\r\n     * @param value Tooltip HTML content template\r\n     */\n    set: function set(value) {\n      value = $type.toText(value);\n      this.hoverable = true;\n\n      if (this.setPropertyValue(\"tooltipHTML\", value)) {\n        if (this.tooltip) {\n          if (this.tooltip.visible) {\n            this.showTooltip();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipText\", {\n    /**\r\n     * @return Tooltip content template\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"tooltipText\");\n    },\n\n    /**\r\n     * A text template to be used to populate Tooltip's contents.\r\n     *\r\n     * If element has `tooltipDataItem` or `dataItem` set, this will be parsed\r\n     * for any data values to be replaced with the values from respective data\r\n     * items.\r\n     *\r\n     * This template will also be parsed for any special formatting tags.\r\n     *\r\n     * @param value Tooltip content template\r\n     * @see {@link TextFormatter}\r\n     */\n    set: function set(value) {\n      value = $type.toText(value);\n\n      if (value) {\n        this.hoverable = true;\n      }\n\n      if (this.setPropertyValue(\"tooltipText\", value)) {\n        if (this.tooltip) {\n          if (this.tooltip.visible) {\n            this.showTooltip();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipContainer\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Container\r\n     */\n    get: function get() {\n      if (this._tooltipContainer) {\n        return this._tooltipContainer;\n      } else if (this.parent) {\n        return this.parent.tooltipContainer;\n      }\n    },\n\n    /**\r\n     * A container reference that should be used to place element's\r\n     * [[Tooltip]] in.\r\n     *\r\n     * Will use parent's container if does not have one set.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Container\r\n     * @todo Dispose of the old _tooltipContainer ?\r\n     */\n    set: function set(value) {\n      this._tooltipContainer = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipX\", {\n    /**\r\n     * @return Tooltip X (px)\r\n     */\n    get: function get() {\n      return this.getTooltipX();\n    },\n\n    /**\r\n     * X coordinate the [[Tooltip]] should be shown at.\r\n     *\r\n     * @param value  Tooltip X (px)\r\n     */\n    set: function set(value) {\n      if (this.setPercentProperty(\"tooltipX\", value) && this.tooltip) {\n        this.tooltip.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"alwaysShowTooltip\", {\n    /**\r\n     * @return Always show tooltip?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"showTooltipOn\") == \"always\";\n    },\n\n    /**\r\n     * DEPRECATION NOTICE: This setting is deprecated in favor of a more flexible\r\n     * setting: `showTooltipOn`. Please use `showTooltipOn = \"always\"` instead.\r\n     *\r\n     * Indicates if this element should display a tooltip permanently.\r\n     *\r\n     * Useful, if you want to show permanent tooltips on some items.\r\n     *\r\n     * @default false\r\n     * @since 4.5.4\r\n     * @deprecated Use `showTooltipOn = \"always\"` instead\r\n     * @param  value  Always show tooltip?\r\n     */\n    set: function set(value) {\n      value = $type.toBoolean(value);\n\n      if (value) {\n        this.showTooltipOn = \"always\";\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"showTooltipOn\", {\n    /**\r\n     * @return When to show tooltip\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"showTooltipOn\");\n    },\n\n    /**\r\n     * Indicates when tooltip needs to be shown on this element:\r\n     *\r\n     * * `\"hover\"` (default) - Tooltip will be shown when element is hovered on.\r\n     * * `\"hit\"` - Tooltip will be shown when element is clicked/tapped. Tooltip will be hidden when clicked/tapped anywhere else.\r\n     * * `\"always\"` - Tooltip will be shown on the element permanently.\r\n     *\r\n     * For example, if you would like to show tooltips on all of the columns of\r\n     * a [[ColumnSeries]]:\r\n     *\r\n     * ```TypeScript\r\n     * series.columns.template.showTooltipOn = \"always\";\r\n     * ```\r\n     * ```JavaScript\r\n     * series.columns.template.showTooltipOn = \"always\";\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"columns\": {\r\n     *       \"showTooltipOn\": \"always\"\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * It can even be set to display on a selected columns via `propertyFields`:\r\n     *\r\n     * ```TypeScript\r\n     * series.columns.template.propertyFields.showTooltipOn = \"tooltip\";\r\n     * ```\r\n     * ```JavaScript\r\n     * series.columns.template.propertyFields.showTooltipOn = \"tooltip\";\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"columns\": {\r\n     *       \"propertyFields\": {\r\n     *         \"showTooltipOn\": \"tooltip\"\r\n     *       }\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @default \"hover\"\r\n     * @since 4.7.9\r\n     * @param  value  When to show tooltip\r\n     */\n    set: function set(value) {\n      if (this.setPropertyValue(\"showTooltipOn\", value)) {\n        if (value == \"hit\") {\n          this.clickable = true;\n        }\n\n        if (this.tooltip) {\n          if (value == \"always\") {\n            this.showTooltip();\n          } else {\n            this.handleAlwaysShowTooltip();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipPosition\", {\n    /**\r\n     * Position\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"tooltipPosition\");\n    },\n\n    /**\r\n     * Specifies if [[Tooltip]] should follow the mouse or touch pointer or stay\r\n     * at the fixed position.\r\n     *\r\n     * @param value  Position\r\n     */\n    set: function set(value) {\n      this.setPropertyValue(\"tooltipPosition\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipY\", {\n    /**\r\n     * @return Tooltip Y (px)\r\n     */\n    get: function get() {\n      return this.getTooltipY();\n    },\n\n    /**\r\n     * Y coordinate the [[Tooltip]] should be shown at.\r\n     *\r\n     * @param value  Tooltip Y (px)\r\n     */\n    set: function set(value) {\n      if (this.setPercentProperty(\"tooltipY\", value) && this.tooltip) {\n        this.tooltip.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns Tooltip X coordinate if it's set, or middle of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return X (px)\r\n   */\n\n  Sprite.prototype.getTooltipX = function () {\n    var x = this.getPropertyValue(\"tooltipX\");\n\n    if (!$type.hasValue(x)) {\n      x = percent(50);\n    }\n\n    var value;\n\n    if ($type.isNumber(x)) {\n      value = x;\n    }\n\n    if (x instanceof Percent) {\n      value = this.maxLeftSelf + this._measuredWidthSelf * x.value - this.pixelPaddingLeft - this.ex; // overflow is know only for measured items, so this is not always good\n    }\n\n    if (!$type.isNumber(value)) {\n      value = 0;\n    }\n\n    return value;\n  };\n  /**\r\n   * Returns Tooltip Y coordinate if it's set, or middle of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Y (px)\r\n   */\n\n\n  Sprite.prototype.getTooltipY = function () {\n    var y = this.getPropertyValue(\"tooltipY\");\n\n    if (!$type.hasValue(y)) {\n      y = percent(50);\n    }\n\n    var value;\n\n    if ($type.isNumber(y)) {\n      value = y;\n    }\n\n    if (y instanceof Percent) {\n      value = this.maxTopSelf + this._measuredHeightSelf * y.value - this.pixelPaddingTop - this.ey; // overflow is know only for measured items, so this is not always good\n    }\n\n    if (!$type.isNumber(value)) {\n      value = 0;\n    }\n\n    return value;\n  };\n  /**\r\n   * Displays a modal or console message with error, and halts any further\r\n   * processing of this item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param e Error\r\n   * @todo Implement from applying further actions to this item\r\n   */\n\n\n  Sprite.prototype.raiseCriticalError = function (e, closable) {\n    if (this.svgContainer) {\n      if (!this._adapterO) {\n        this.modal.content = e.message;\n      } else {\n        this.modal.content = this._adapterO.apply(\"criticalError\", e).message;\n      }\n\n      if (!closable) {\n        this.disabled = true;\n      } else {\n        this.modal.closable = true;\n      }\n\n      this.modal.open();\n    }\n\n    if (options.verbose) {\n      console.log(e);\n    }\n  };\n  /**\r\n  * Processes JSON-based config before it is applied to the object.\r\n  *\r\n  * @ignore Exclude from docs\r\n  * @param config  Config\r\n  */\n\n\n  Sprite.prototype.processConfig = function (config) {\n    if (config) {\n      // Tooltip color source\n      if ($type.hasValue(config.tooltipColorSource) && $type.isString(config.tooltipColorSource) && this.map.hasKey(config.tooltipColorSource)) {\n        config.tooltipColorSource = this.map.getKey(config.tooltipColorSource);\n      } // Cursor styles\n\n\n      if ($type.hasValue(config.cursorOverStyle) && $type.isString(config.cursorOverStyle)) {\n        config.cursorOverStyle = this.getCursorStyle(config.cursorOverStyle);\n      }\n\n      if ($type.hasValue(config.cursorDowntyle) && $type.isString(config.cursorDowntyle)) {\n        config.cursorDowntyle = this.getCursorStyle(config.cursorDowntyle);\n      }\n\n      if ($type.hasValue(config.cursorOptions)) {\n        if ($type.hasValue(config.cursorOptions.overStyle) && $type.isString(config.cursorOptions.overStyle)) {\n          config.cursorOptions.overStyle = this.getCursorStyle(config.cursorOptions.overStyle);\n        }\n\n        if ($type.hasValue(config.cursorOptions.downStyle) && $type.isString(config.cursorOptions.downStyle)) {\n          config.cursorOptions.downStyle = this.getCursorStyle(config.cursorOptions.downStyle);\n        }\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n\n    this.processDelayedMap();\n  };\n  /**\r\n   * Converts string name of the cursor into actual [[MouseCursorStyle]].\r\n   *\r\n   * @param style  Cursor type\r\n   * @return Cursor definition\r\n   */\n\n\n  Sprite.prototype.getCursorStyle = function (style) {\n    switch (style) {\n      case \"grab\":\n        return MouseCursorStyle.grab;\n\n      case \"grabbing\":\n        return MouseCursorStyle.grabbing;\n\n      case \"pointer\":\n        return MouseCursorStyle.pointer;\n\n      case \"horizontalResize\":\n        return MouseCursorStyle.horizontalResize;\n\n      case \"verticalResize\":\n        return MouseCursorStyle.verticalResize;\n\n      default:\n        return MouseCursorStyle[\"default\"];\n    }\n  };\n  /**\r\n   * This function is used to sort element's JSON config properties, so that\r\n   * some properties that absolutely need to be processed last, can be put at\r\n   * the end.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param a  Element 1\r\n   * @param b  Element 2\r\n   * @return Sorting number\r\n   */\n\n\n  Sprite.prototype.configOrder = function (a, b) {\n    if (a == b) {\n      return 0;\n    } // Must come last\n    else if (a == \"tooltipColorSource\") {\n        return 1;\n      } else if (b == \"tooltipColorSource\") {\n        return -1;\n      } else {\n        return _super.prototype.configOrder.call(this, a, b);\n      }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"isHidden\", {\n    /**\r\n     * If `sprite.hide()` is called, we set isHidden to true when sprite is hidden.\r\n     * This was added becaus hidden state might have visibility set to true and so\r\n     * there would not be possible to find out if a sprite is technically hidden or not.\r\n     */\n    get: function get() {\n      if (this._isHidden) {\n        return this._isHidden;\n      } else if (this._parent) {\n        return this._parent.isHidden;\n      }\n\n      return false;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"showOnInit\", {\n    /**\r\n     * @return Show on init?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"showOnInit\");\n    },\n\n    /**\r\n     * If this is set to `true`, Sprite, when inited will be instantly hidden\r\n     * (\"hidden\" state applied) and then shown (\"default\" state applied).\r\n     *\r\n     * If your \"default\" state's `transitionDuration > 0` this will result in\r\n     * initial animation from \"hidden\" state to \"default\" state.\r\n     *\r\n     * If you need a Sprite which has `showOnInit = true` not to be shown\r\n     * initially, set `sprite.hidden = true`. Setting `sprite.visible = false`\r\n     * will not prevent the animation and the sprite will be shown.\r\n     *\r\n     * @param value show on init?\r\n     */\n    set: function set(value) {\n      value = $type.toBoolean(value);\n      this.setShowOnInit(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Sprite.prototype.setShowOnInit = function (value) {\n    if (this.setPropertyValue(\"showOnInit\", value)) {\n      if (!this.isTemplate) {\n        if (value && !this.inited && !this.hidden) {\n          this._showOnInitDisposer = new MultiDisposer([registry.events.once(\"enterframe\", this.hideInitially, this), this.events.once(\"beforevalidated\", this.hideInitially, this, false), this.events.on(\"inited\", this.appear, this, false)]);\n\n          this._disposers.push(this._showOnInitDisposer);\n        } else {\n          if (this._showOnInitDisposer) {\n            this._showOnInitDisposer.dispose();\n          }\n        }\n      }\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  Sprite.prototype.hideInitially = function () {\n    if (!this.isDisposed()) {\n      this.appeared = false; //if (!this.hidden && !this._isHidden) { // not good for series, as on enterframe it doesn't have data items yet.\n\n      if (!this.inited) {\n        this.hide(0);\n      }\n    }\n  };\n  /**\r\n   * Hides the chart instantly and then shows it. If defaultState.transitionDuration > 0, this will result an animation in which properties of hidden state will animate to properties of visible state.\r\n   */\n\n\n  Sprite.prototype.appear = function () {\n    var _this = this;\n\n    this.appeared = false;\n\n    if (!this.hidden && !this.isHidden) {\n      this.hide(0);\n    }\n\n    if (!this.hidden) {\n      var animation = this.show();\n\n      if (animation && !animation.isFinished()) {\n        this.addDisposer(animation.events.on(\"animationended\", function () {\n          _this.appeared = true;\n\n          _this.dispatch(\"appeared\");\n        }));\n      } else {\n        this.appeared = true;\n        this.dispatch(\"appeared\");\n      }\n    } else {\n      this.appeared = true;\n      this.dispatch(\"appeared\");\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"hidden\", {\n    /**\r\n     * @return Is initially hidden?\r\n     */\n    get: function get() {\n      return this.getPropertyValue(\"hidden\");\n    },\n\n    /**\r\n     * If a sprite has `showOnInit = true`, it will animate from \"hidden\" to\r\n     * \"default\" state when initialized. To prevent this but keep\r\n     * `showOnInit = true`, you can set `sprite.hidden = true`.\r\n     *\r\n     * @param value initially hidden?\r\n     */\n    set: function set(value) {\n      value = $type.toBoolean(value);\n      this.setPropertyValue(\"hidden\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"bbox\", {\n    /**\r\n     * Returns bounding box (square) for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    get: function get() {\n      if (this.definedBBox) {\n        return this.definedBBox;\n      }\n\n      return this._bbox;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"plugins\", {\n    /**\r\n     * A list of plugins (objects that implement [[IPlugin]] interface) attached\r\n     * to this object.\r\n     *\r\n     * @since 4.2.2\r\n     * @return List of plugins\r\n     */\n    get: function get() {\n      var _this = this;\n\n      if (!this._plugins) {\n        this._plugins = new List();\n\n        this._disposers.push(this._plugins.events.on(\"inserted\", function (ev) {\n          ev.newValue.target = _this;\n          ev.newValue.init();\n        }));\n\n        this._disposers.push(new ListDisposer(this._plugins));\n      }\n\n      return this._plugins;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Called during the System.update method\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Sprite.prototype._systemUpdate = function (skippedSprites) {\n    this.validate();\n  };\n  /**\r\n   * Called during the System.update method\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype._systemCheckIfValidate = function () {\n    return true;\n  };\n  /**\r\n   * Called during the System.validatePositions method\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype._systemValidatePositions = function () {\n    this.validatePosition();\n  };\n  /**\r\n   * Called during the System.validateLayouts method\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype._systemValidateLayouts = function () {};\n\n  return Sprite;\n}(BaseObjectEvents);\n\nexport { Sprite };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Sprite\"] = Sprite;"],"sourceRoot":""}